<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>这不是一封PDF</title>
    <link href="/2023/05/27/%E8%BF%99%E4%B8%8D%E6%98%AF%E4%B8%80%E5%B0%81PDF/"/>
    <url>/2023/05/27/%E8%BF%99%E4%B8%8D%E6%98%AF%E4%B8%80%E5%B0%81PDF/</url>
    
    <content type="html"><![CDATA[<p>◔◔这个博客，我其实一直想做成既可以分享技术文章，又可以有个相册去放我拍的照片，也可以写一些日记的那种，奈何一直抽不出来时间去弄，但是早晚会做好的〃•ω‹〃，<strong>先相信（先画大饼）！</strong></p><h4 id="PS：最近好忙，各种事情压在头上，人如果可以分身就好了【手动狗头-jpg】"><a href="#PS：最近好忙，各种事情压在头上，人如果可以分身就好了【手动狗头-jpg】" class="headerlink" title="PS：最近好忙，各种事情压在头上，人如果可以分身就好了【手动狗头.jpg】"></a>PS：最近好忙，各种事情压在头上，人如果可以分身就好了【手动狗头.jpg】</h4><p>原本以为要很久很久不写东西了，我不想太打扰到别人，可是似乎恰恰看起来，我好像做的有点多了(●’◡’●)。起初觉得还是就只讲一两句会比较好，可是一坐下来，打开电脑，就会有讲不完的话涌出来……</p><h4 id="你似乎有心事，我不知道具体因为什么，也不确定是否和我有关系。但没关系，我想讲的，其实与是否知道这些无关："><a href="#你似乎有心事，我不知道具体因为什么，也不确定是否和我有关系。但没关系，我想讲的，其实与是否知道这些无关：" class="headerlink" title="你似乎有心事，我不知道具体因为什么，也不确定是否和我有关系。但没关系，我想讲的，其实与是否知道这些无关："></a>你似乎有心事，我不知道具体因为什么，也不确定是否和我有关系。但没关系，我想讲的，其实与是否知道这些无关：</h4><figure class="highlight plaintext"><figcaption><span>wiki</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs tiki">我身体里也有一列火车<br><br>但是，我从不示人。与有没有秘密无关<br><br>月亮圆一百次也不能打动我。月亮引起的笛鸣<br><br>被我捂着<br><br>但是有人上车，有人下去，有人从窗户里丢果皮<br><br>和手帕。有人说这是与春天相关的事物<br><br>它的目的地不是停驻，是经过<br><br>是那个小小的平原，露水在清风里发呆<br><br>茅草屋很低，炊烟摇摇晃晃的<br><br>那个小男孩低头，逆光而坐，泪水未干<br><br>手里的一朵花瞪大眼睛<br><br>看着他<br><br>我身体里的火车，油漆已经斑驳<br><br>它不慌不忙，允许醉鬼，乞丐，卖艺的，或什么领袖<br><br>上上下下<br><br>我身体里的火车从来不会错轨<br><br>所以允许大雪，风暴，泥石流，和荒谬 <br></code></pre></td></tr></table></figure><h4 id="我个人喜欢月亮胜过太阳，我一直觉得我其实挺像月亮的"><a href="#我个人喜欢月亮胜过太阳，我一直觉得我其实挺像月亮的" class="headerlink" title="我个人喜欢月亮胜过太阳，我一直觉得我其实挺像月亮的"></a>我个人喜欢月亮胜过太阳，我一直觉得我其实挺像月亮的</h4><p>风雪来了，月亮就“看不到“了，但是看穿乌云的人会知道，月亮就在那里，<em>如约而至，从未离开</em>；</p><p>月亮的光来自太阳，就像被父母亲人呵护疼爱，被”真朋友“甚至陌生人无私帮助，以及被那些无尽的远方、无数的人们的故事所照亮；</p><p>而月亮自己的光，哪怕没那么耀眼，哪怕会有满身斑驳，时圆时阙，但也会想要温暖人间。</p><h4 id="你喜欢迪士尼，我喜欢DC，最爱Batman"><a href="#你喜欢迪士尼，我喜欢DC，最爱Batman" class="headerlink" title="你喜欢迪士尼，我喜欢DC，最爱Batman!"></a>你喜欢迪士尼，我喜欢DC，最爱Batman!</h4><p>我不喜欢凡事出风头，但是在大家需要的时候，我一定会是站出来的那一个</p><p>PS :微信头像其实就是蝙蝠侠剧照，QQ也是，<strong>Alan</strong>是我给自己起的英文名</p><h4 id="哈哈哈，我好像又东说西说了一大堆东西，那这次就最后再说一句："><a href="#哈哈哈，我好像又东说西说了一大堆东西，那这次就最后再说一句：" class="headerlink" title="哈哈哈，我好像又东说西说了一大堆东西，那这次就最后再说一句："></a>哈哈哈，我好像又东说西说了一大堆东西，那这次就最后再说一句：</h4><p>在每个当下，就做你认为对的事，我挺你，相信你！！！</p><h4 id="记得你上次说，周一好像有考试？加油，冲冲冲！"><a href="#记得你上次说，周一好像有考试？加油，冲冲冲！" class="headerlink" title="记得你上次说，周一好像有考试？加油，冲冲冲！"></a>记得你上次说，周一好像有考试？加油，冲冲冲！</h4><p>PS: 过段时间这篇文章得要<em>删掉</em>，因为目前我的这个博客还是以分享技术文章为主，嘻嘻<strong>₍ᐢ.ˬ.⑅ᐢ₎</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AI实践-Zebra Problem</title>
    <link href="/2023/03/23/AI%E5%AE%9E%E8%B7%B5-Zebra-Problem/"/>
    <url>/2023/03/23/AI%E5%AE%9E%E8%B7%B5-Zebra-Problem/</url>
    
    <content type="html"><![CDATA[<h3 id="Kanren"><a href="#Kanren" class="headerlink" title="Kanren"></a>Kanren</h3><p>kanren是一个Python中的逻辑编程库，用于自动化推理和约束求解。<br>它允许用户使用关系和规则来表示问题，并使用不同的搜索算法来查找满足约束条件的解决方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> kanren <span class="hljs-keyword">import</span> run, eq, membero, var, conde<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = var()<br>run(<span class="hljs-number">1</span>,x, eq(x,<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><pre><code class="hljs">(5,)</code></pre><p>具体解释如下：</p><ul><li>var()函数创建一个新的逻辑变量，它可以表示任何可能的值。</li><li>eq(x, 5)表示x等于5的关系约束。</li><li>run(1, x, eq(x, 5))表示运行一个查询，寻找一个满足关系约束eq(x, 5)的x值，并返回一个长度为1的列表，其中包含这个x值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">z = var()<br>run(<span class="hljs-number">1</span>, x, eq(x,z), eq(z,<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><pre><code class="hljs">(3,)</code></pre><p>前面的例子中使用的 eq，表述的是两个表达式相等。membero(item, coll) 表示 item  是 coll集合中的一个成员。下面例子使用 两次 membero去请求 x 的2个值，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">run(<span class="hljs-number">2</span>, x, membero(x, (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)),  <span class="hljs-comment"># x is a member of (1, 2, 3) </span><br>              membero(x, (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)))  <span class="hljs-comment"># x is a member of (2, 3, 4)</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">(2, 3)</code></pre><p><strong>逻辑变量</strong></p><p>下面例子中，z = var() 创建一个逻辑变量.  您还可以选择为变量命名，以方便后面调试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个变量</span><br>z = var(<span class="hljs-string">&#x27;test&#x27;</span>)<br>z<br></code></pre></td></tr></table></figure><pre><code class="hljs">~test</code></pre><p><strong>知识表达</strong></p><p>下面代码创建一个亲缘关系，并且使用它来判断谁是 Simpsons家庭的父亲。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> kanren <span class="hljs-keyword">import</span> Relation, facts<br>parent = Relation()<br>facts(parent, (<span class="hljs-string">&#x27;Allen&#x27;</span>, <span class="hljs-string">&#x27;Bart&#x27;</span>),<br>      (<span class="hljs-string">&#x27;Allen&#x27;</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>),<br>      (<span class="hljs-string">&#x27;Abe&#x27;</span>, <span class="hljs-string">&#x27;Allen&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">run(<span class="hljs-number">1</span>, x, parent(x, <span class="hljs-string">&#x27;Bart&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code class="hljs">(&#39;Allen&#39;,)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">run(<span class="hljs-number">2</span>, x, parent(<span class="hljs-string">&#x27;Allen&#x27;</span>, x))<br></code></pre></td></tr></table></figure><pre><code class="hljs">(&#39;Bart&#39;, &#39;Lisa&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">y = var()<br>run(<span class="hljs-number">1</span>, x, parent(x, y),<br>                   parent(y, <span class="hljs-string">&#x27;Bart&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code class="hljs">(&#39;Abe&#39;,)</code></pre><p>另一种实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grandparent</span>(<span class="hljs-params">x,z</span>):</span><br>    y = var()<br>    <span class="hljs-keyword">return</span> conde((parent(x, y), parent(y, z)))<br><br>run(<span class="hljs-number">1</span>, x, grandparent(x, <span class="hljs-string">&#x27;Bart&#x27;</span>))<br></code></pre></td></tr></table></figure><pre><code class="hljs">(&#39;Abe&#39;,)</code></pre><p>conde() 是Scheme中实现的Kanren库提供的特定操作符，它用于将多个条件组合成一个联合条件，并支持回溯和搜索。</p><h3 id="斑马问题"><a href="#斑马问题" class="headerlink" title="斑马问题"></a>斑马问题</h3><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p><em>斑马问题：</em> 5 个不同国家（英国、西班牙、日本、意大利、挪威）且工作各不相同（油漆工、摄影师、外交官、小提琴家、医生）的人分别住在一条街上的 5 所房子里，<br>每所房子的颜色不同（红色、白色、蓝色、黄色、绿色），每个人都有自己养的不同宠物（狗、蜗牛、斑马、马、狐狸），喜欢喝不同的饮料（矿泉水、牛奶、茶、橘子汁、咖啡）。<br>根据以下提示，你能告诉我哪所房子里的人养斑马，哪所房子里的人喜欢喝矿泉水吗？</p><ol><li>   英国人住在红色的房子里</li><li>   西班牙人养了一条狗</li><li>   日本人是一个油漆工</li><li>   意大利人喜欢喝茶</li><li>   挪威人住在左边的第一个房子里</li><li>   绿房子在白房子的右边</li><li>   摄影师养了一只蜗牛</li><li>   外交官住在黄房子里</li><li>   中间那个房子的人喜欢喝牛奶</li><li>   喜欢喝咖啡的人住在绿房子里</li><li>   挪威人住在蓝色的房子旁边</li><li>   小提琴家喜欢喝橘子汁</li><li>   养狐狸的人所住的房子与医生的房子相邻</li><li>   养马的人所住的房子与外交官的房子相邻</li></ol><h5 id="求解问题"><a href="#求解问题" class="headerlink" title="求解问题"></a>求解问题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> kanren <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> kanren.core <span class="hljs-keyword">import</span> lall<br><span class="hljs-keyword">import</span> time<br></code></pre></td></tr></table></figure><p>定义函数<strong>left()</strong> 和 <strong>next()</strong> 来查找哪个房屋的左边或者接近谁的房子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">left</span>(<span class="hljs-params">q, p, <span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-keyword">return</span> membero((q,p), <span class="hljs-built_in">zip</span>(<span class="hljs-built_in">list</span>, <span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>:]))<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next</span>(<span class="hljs-params">q, p, <span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-keyword">return</span> conde([left(q, p, <span class="hljs-built_in">list</span>)], [left(p, q, <span class="hljs-built_in">list</span>)])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">houses = var()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># my lall: county, job, drink, pet, color </span><br>rules_zebraproblem = lall(<br>    (eq, (var(), var(), var(), var(), var()), houses),<br>    (membero,(<span class="hljs-string">&#x27;Englishman&#x27;</span>, var(), var(), var(), <span class="hljs-string">&#x27;red&#x27;</span>), houses),<br>    (membero,(<span class="hljs-string">&#x27;Spanish&#x27;</span>, var(), var(), <span class="hljs-string">&#x27;dog&#x27;</span>, var()), houses),<br>    (membero,(<span class="hljs-string">&#x27;Japanese&#x27;</span>, <span class="hljs-string">&#x27;painters&#x27;</span>, var(), var(), var()), houses),<br>    (membero,(<span class="hljs-string">&#x27;Italian&#x27;</span>, var(), <span class="hljs-string">&#x27;tea&#x27;</span>, var(), var()), houses),<br>    (eq,((<span class="hljs-string">&#x27;Norwegian&#x27;</span>, var(), var(), var(), var()), var(), var(), var(), var()), houses),<br>    (left,(var(), var(), var(), var(), <span class="hljs-string">&#x27;white&#x27;</span>),<br>    (var(), var(), var(), var(), <span class="hljs-string">&#x27;green&#x27;</span>), houses),<br>    (membero,(var(), <span class="hljs-string">&#x27;photographer&#x27;</span>, var(), <span class="hljs-string">&#x27;snail&#x27;</span>, var()), houses),<br>    (membero,(var(), <span class="hljs-string">&#x27;diplomat&#x27;</span>, var(), var(), <span class="hljs-string">&#x27;yellow&#x27;</span>), houses),<br>    (eq,(var(), var(), (var(), var(), <span class="hljs-string">&#x27;milk&#x27;</span>, var(), var()), var(), var()), houses),<br>    (membero,(var(), var(), <span class="hljs-string">&#x27;coffee&#x27;</span>, var(),<span class="hljs-string">&#x27;green&#x27;</span>), houses),<br>    (<span class="hljs-built_in">next</span>,(<span class="hljs-string">&#x27;Norwegian&#x27;</span>, var(), var(), var(), var()),<br>    (var(), var(), var(), var(), <span class="hljs-string">&#x27;blue&#x27;</span>), houses),<br>    (membero,(var(), <span class="hljs-string">&#x27;violinist&#x27;</span>,<span class="hljs-string">&#x27;orange juice&#x27;</span>, var(), var()), houses),<br>    (<span class="hljs-built_in">next</span>,(var(), var(), var(), <span class="hljs-string">&#x27;fox&#x27;</span>, var()),<br>    (var(), <span class="hljs-string">&#x27;doctor&#x27;</span>, var(), var(), var()), houses),<br>    (<span class="hljs-built_in">next</span>,(var(), var(), var(), <span class="hljs-string">&#x27;horse&#x27;</span>, var()),<br>    (var(), <span class="hljs-string">&#x27;diplomat&#x27;</span>, var(), var(), var()), houses),<br>    (membero,(var(), var(), var(), <span class="hljs-string">&#x27;zebra&#x27;</span>, var()), houses),<br>    (membero,(var(), var(), <span class="hljs-string">&#x27;mineral water&#x27;</span>, var(), var()), houses),<br>)<br></code></pre></td></tr></table></figure><p><strong>完整推理结果：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">solutions = run(<span class="hljs-number">0</span>, houses, rules_zebraproblem)<br>solutions <br></code></pre></td></tr></table></figure><pre><code class="hljs">(((&#39;Norwegian&#39;, &#39;diplomat&#39;, &#39;mineral water&#39;, &#39;fox&#39;, &#39;yellow&#39;),  (&#39;Italian&#39;, &#39;doctor&#39;, &#39;tea&#39;, &#39;horse&#39;, &#39;blue&#39;),  (&#39;Englishman&#39;, &#39;photographer&#39;, &#39;milk&#39;, &#39;snail&#39;, &#39;red&#39;),  (&#39;Spanish&#39;, &#39;violinist&#39;, &#39;orange juice&#39;, &#39;dog&#39;, &#39;white&#39;),  (&#39;Japanese&#39;, &#39;painters&#39;, &#39;coffee&#39;, &#39;zebra&#39;, &#39;green&#39;)),)</code></pre><p><strong>problem A</strong>. 哪所房子里的人养斑马:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">output_zebra = [house <span class="hljs-keyword">for</span> house <span class="hljs-keyword">in</span> solutions[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;zebra&#x27;</span> <span class="hljs-keyword">in</span> house][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;\n&#x27;</span>+ output_zebra + <span class="hljs-string">&#x27; owns zebra.&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Japanese owns zebra.</code></pre><p><strong>problem B.</strong> 哪所房子里的人喜欢喝矿泉水</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">output_mineralWater = [house <span class="hljs-keyword">for</span> house <span class="hljs-keyword">in</span> solutions[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;mineral water&#x27;</span> <span class="hljs-keyword">in</span> house][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;\n&#x27;</span>+ output_mineralWater + <span class="hljs-string">&#x27; likes mineral water.&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Norwegian likes mineral water.</code></pre><h5 id="Solution-two"><a href="#Solution-two" class="headerlink" title="Solution two :"></a>Solution two :</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Zebra puzzle as published in Life International in 1962.</span><br><span class="hljs-string">https://en.wikipedia.org/wiki/Zebra_Puzzle</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass, field<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Union</span><br><span class="hljs-keyword">from</span> unification <span class="hljs-keyword">import</span> Var, unifiable, var, <span class="hljs-built_in">vars</span><br><span class="hljs-keyword">from</span> kanren <span class="hljs-keyword">import</span> conde, eq, lall, membero, run<br><br><span class="hljs-meta">@unifiable</span><br><span class="hljs-meta">@dataclass</span><br><span class="hljs-comment"># class House:</span><br><span class="hljs-comment">#     nationality: Union[str, Var] = field(default_factory=var)</span><br><span class="hljs-comment">#     drink: Union[str, Var] = field(default_factory=var)</span><br><span class="hljs-comment">#     animal: Union[str, Var] = field(default_factory=var)</span><br><span class="hljs-comment">#     cigarettes: Union[str, Var] = field(default_factory=var)</span><br><span class="hljs-comment">#     color: Union[str, Var] = field(default_factory=var)</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">House</span>:</span><br>    nationality: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, Var] = field(default_factory=var)<br>    job: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, Var] = field(default_factory=var)<br>    drink: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, Var] = field(default_factory=var)<br>    animal: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, Var] = field(default_factory=var)<br>    color: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, Var] = field(default_factory=var)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">righto</span>(<span class="hljs-params">right, left, houses</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Express that `right` is on the right of `left` among all the houses.&quot;&quot;&quot;</span><br>    neighbors = <span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">zip</span>(houses[:-<span class="hljs-number">1</span>], houses[<span class="hljs-number">1</span>:]))<br>    <span class="hljs-keyword">return</span> membero((left, right), neighbors)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">nexto</span>(<span class="hljs-params">a, b, houses</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Express that `a` and `b` are next to each other.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> conde([righto(a, b, houses)], [righto(b, a, houses)])<br><br><br><span class="hljs-comment"># And now for the riddle</span><br>houses = <span class="hljs-built_in">vars</span>(<span class="hljs-number">5</span>)<br><br>goals = lall(<br>    membero(House(<span class="hljs-string">&quot;Englishman&quot;</span>, color=<span class="hljs-string">&quot;red&quot;</span>), houses),<br>    membero(House(<span class="hljs-string">&quot;Spanish&quot;</span>, animal=<span class="hljs-string">&quot;dog&quot;</span>), houses),<br>    membero(House(<span class="hljs-string">&quot;Japanese&quot;</span>, job=<span class="hljs-string">&quot;painters&quot;</span>), houses),<br>    membero(House(<span class="hljs-string">&quot;Italian&quot;</span>, drink=<span class="hljs-string">&quot;tea&quot;</span>), houses),<br>    eq(House(<span class="hljs-string">&quot;Norwegian&quot;</span>), houses[<span class="hljs-number">0</span>]),<br>    righto(House(color=<span class="hljs-string">&quot;green&quot;</span>), House(color=<span class="hljs-string">&quot;white&quot;</span>), houses),<br>    membero(House(job=<span class="hljs-string">&quot;photographer&quot;</span>, animal=<span class="hljs-string">&quot;snail&quot;</span>), houses),<br>    membero(House(job=<span class="hljs-string">&quot;diplomat&quot;</span>, color=<span class="hljs-string">&quot;yellow&quot;</span>), houses),<br>    eq(House(drink=<span class="hljs-string">&quot;milk&quot;</span>), houses[<span class="hljs-number">2</span>]),<br>    membero(House(drink=<span class="hljs-string">&quot;coffee&quot;</span>, color=<span class="hljs-string">&quot;green&quot;</span>), houses),<br>    nexto(House(<span class="hljs-string">&quot;Norwegian&quot;</span>), House(color=<span class="hljs-string">&quot;blue&quot;</span>), houses),<br>    membero(House(job=<span class="hljs-string">&quot;violinist&quot;</span>, drink=<span class="hljs-string">&quot;orange juice&quot;</span>), houses),<br>    nexto(House(job=<span class="hljs-string">&quot;doctor&quot;</span>), House(animal=<span class="hljs-string">&quot;fox&quot;</span>), houses),<br>    nexto(House(job=<span class="hljs-string">&quot;diplomat&quot;</span>), House(animal=<span class="hljs-string">&quot;horse&quot;</span>), houses),<br>    membero(House(drink=<span class="hljs-string">&quot;mineral water&quot;</span>), houses),<br>    membero(House(animal=<span class="hljs-string">&quot;zebra&quot;</span>), houses),<br>)<br><br>results = run(<span class="hljs-number">0</span>, houses, goals)<br><span class="hljs-built_in">print</span>(results)<br></code></pre></td></tr></table></figure><pre><code class="hljs">([House(nationality=&#39;Norwegian&#39;, job=&#39;diplomat&#39;, drink=&#39;mineral water&#39;, animal=&#39;fox&#39;, color=&#39;yellow&#39;), House(nationality=&#39;Italian&#39;, job=&#39;doctor&#39;, drink=&#39;tea&#39;, animal=&#39;horse&#39;, color=&#39;blue&#39;), House(nationality=&#39;Englishman&#39;, job=&#39;photographer&#39;, drink=&#39;milk&#39;, animal=&#39;snail&#39;, color=&#39;red&#39;), House(nationality=&#39;Spanish&#39;, job=&#39;violinist&#39;, drink=&#39;orange juice&#39;, animal=&#39;dog&#39;, color=&#39;white&#39;), House(nationality=&#39;Japanese&#39;, job=&#39;painters&#39;, drink=&#39;coffee&#39;, animal=&#39;zebra&#39;, color=&#39;green&#39;)],)</code></pre><h5 id="Reference-："><a href="#Reference-：" class="headerlink" title="Reference ："></a>Reference ：</h5><ul><li><a href="https://www.cnblogs.com/duoba/p/9531242.html">python逻辑编程之kanren(博客园)</a></li><li><a href="https://github.com/pythological/kanren/blob/main/examples/zebra-puzzle.py">pythological/kanren(github)</a></li><li><a href="https://pypi.org/project/kanren/">kanren 0.2.3 Project description</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
      <category>逻辑推理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kanren</tag>
      
      <tag>逻辑推理</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于ML的红楼梦作者分析</title>
    <link href="/2023/02/04/%E5%9F%BA%E4%BA%8EML%E7%9A%84%E7%BA%A2%E6%A5%BC%E6%A2%A6%E4%BD%9C%E8%80%85%E5%88%86%E6%9E%90/"/>
    <url>/2023/02/04/%E5%9F%BA%E4%BA%8EML%E7%9A%84%E7%BA%A2%E6%A5%BC%E6%A2%A6%E4%BD%9C%E8%80%85%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>《红楼梦》，原名《石头记》，中国古代章回体长篇小说，中国古典四大名著之一。其通行本共120回，一般认为前80回是清代作家曹雪芹所著，后40回作者为无名氏，整理者为程伟元、高鹗。<a href="https://baike.baidu.com/item/%E7%BA%A2%E6%A5%BC%E6%A2%A6/15311#:~:text=%E3%80%8A%E7%BA%A2%E6%A5%BC%E6%A2%A6%E3%80%8B%EF%BC%8C%E5%8E%9F%E5%90%8D%E3%80%8A%E7%9F%B3%E5%A4%B4%E8%AE%B0%E3%80%8B%EF%BC%8C%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BB%A3%20%E7%AB%A0%E5%9B%9E%E4%BD%93%20%E9%95%BF%E7%AF%87%E5%B0%8F%E8%AF%B4%20%EF%BC%8C%E4%B8%AD%E5%9B%BD%E5%8F%A4%E5%85%B8%20%E5%9B%9B%E5%A4%A7%E5%90%8D%E8%91%97%20%E4%B9%8B%E4%B8%80%E3%80%82,%E5%85%B6%E9%80%9A%E8%A1%8C%E6%9C%AC%E5%85%B1120%E5%9B%9E%EF%BC%8C%E4%B8%80%E8%88%AC%E8%AE%A4%E4%B8%BA%E5%89%8D80%E5%9B%9E%E6%98%AF%E6%B8%85%E4%BB%A3%E4%BD%9C%E5%AE%B6%20%E6%9B%B9%E9%9B%AA%E8%8A%B9%20%E6%89%80%E8%91%97%EF%BC%8C%E5%90%8E40%E5%9B%9E%E4%BD%9C%E8%80%85%E4%B8%BA%E6%97%A0%E5%90%8D%E6%B0%8F%EF%BC%8C%E6%95%B4%E7%90%86%E8%80%85%E4%B8%BA%20%E7%A8%8B%E4%BC%9F%E5%85%83%20%E3%80%81%20%E9%AB%98%E9%B9%97%20%E3%80%82">《红楼梦》百度百科</a></p><p>我们基于聚类方法（K-means）无监督学习和Naive Bayes监督学习方法进行有关章节作者的探索。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> AgglomerativeClustering<br><span class="hljs-keyword">from</span> sklearn.naive_bayes <span class="hljs-keyword">import</span> MultinomialNB<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> MinMaxScaler <span class="hljs-comment"># 归一化</span><br><span class="hljs-keyword">import</span> re<br></code></pre></td></tr></table></figure><h4 id="1-数据处理"><a href="#1-数据处理" class="headerlink" title="1. 数据处理"></a>1. 数据处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成词频矩阵</span><br>big_xuci=[<span class="hljs-string">&#x27;之&#x27;</span>,<span class="hljs-string">&#x27;其&#x27;</span>,<span class="hljs-string">&#x27;或&#x27;</span>,<span class="hljs-string">&#x27;亦&#x27;</span>,<span class="hljs-string">&#x27;方&#x27;</span>,<span class="hljs-string">&#x27;于&#x27;</span>,<span class="hljs-string">&#x27;即&#x27;</span>,<span class="hljs-string">&#x27;皆&#x27;</span>,<span class="hljs-string">&#x27;因&#x27;</span>,<span class="hljs-string">&#x27;仍&#x27;</span>,<span class="hljs-string">&#x27;故&#x27;</span>,<span class="hljs-string">&#x27;尚&#x27;</span>,<span class="hljs-string">&#x27;乃&#x27;</span>,<br>              <span class="hljs-string">&#x27;呀&#x27;</span>,<span class="hljs-string">&#x27;吗&#x27;</span>,<span class="hljs-string">&#x27;咧&#x27;</span>,<span class="hljs-string">&#x27;罢咧&#x27;</span>,<span class="hljs-string">&#x27;啊&#x27;</span>,<span class="hljs-string">&#x27;罢&#x27;</span>,<span class="hljs-string">&#x27;罢了&#x27;</span>,<span class="hljs-string">&#x27;么&#x27;</span>,<span class="hljs-string">&#x27;呢&#x27;</span>,<br>              <span class="hljs-string">&#x27;了&#x27;</span>,<span class="hljs-string">&#x27;的&#x27;</span>,<span class="hljs-string">&#x27;着&#x27;</span>,<span class="hljs-string">&#x27;一&#x27;</span>,<span class="hljs-string">&#x27;不&#x27;</span>,<span class="hljs-string">&#x27;把&#x27;</span>,<span class="hljs-string">&#x27;让&#x27;</span>,<span class="hljs-string">&#x27;向&#x27;</span>,<span class="hljs-string">&#x27;往&#x27;</span>,<span class="hljs-string">&#x27;是&#x27;</span>,<span class="hljs-string">&#x27;在&#x27;</span>,<span class="hljs-string">&#x27;别&#x27;</span>,<span class="hljs-string">&#x27;好&#x27;</span>,<br>              <span class="hljs-string">&#x27;可&#x27;</span>,<span class="hljs-string">&#x27;便&#x27;</span>,<span class="hljs-string">&#x27;就&#x27;</span>,<span class="hljs-string">&#x27;但&#x27;</span>,<span class="hljs-string">&#x27;越&#x27;</span>,<span class="hljs-string">&#x27;再&#x27;</span>,<span class="hljs-string">&#x27;更&#x27;</span>,<span class="hljs-string">&#x27;比&#x27;</span>,<span class="hljs-string">&#x27;很&#x27;</span>,<span class="hljs-string">&#x27;偏&#x27;</span>]<br>    <span class="hljs-comment">#xuci：18个常用虚词</span><br>    <span class="hljs-comment">#xuci=[&#x27;而&#x27;,&#x27;何&#x27;,&#x27;乎&#x27;,&#x27;乃&#x27;,&#x27;其&#x27;,&#x27;且&#x27;,&#x27;若&#x27;,&#x27;所&#x27;,&#x27;为&#x27;,&#x27;焉&#x27;,&#x27;也&#x27;,&#x27;以&#x27;,&#x27;因&#x27;,&#x27;于&#x27;,&#x27;与&#x27;,&#x27;则&#x27;,&#x27;者&#x27;,&#x27;之&#x27;]</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;《红楼梦》完整版.txt&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>s = f.read()<br>    <br>    <span class="hljs-comment">#章节划分，建立章节名的正则表达式</span><br>    <span class="hljs-comment">#rule = re.compile(&#x27;第[一二三四五六七八九十百]+回  &#x27;)</span><br>rule = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;第[零一二三四五六七八九十百]+回  &#x27;</span>)<br>zj=rule.split(s)<br>zj=zj[<span class="hljs-number">1</span>:]<br><br>    <span class="hljs-comment">#首选生成虚词统计矩阵</span><br>cdata=np.zeros([<span class="hljs-built_in">len</span>(zj),<span class="hljs-built_in">len</span>(big_xuci)])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(zj)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(big_xuci)):<br>        cdata[i,j]=zj[i].count(big_xuci[j])<br>    <br>    <span class="hljs-comment">#计算文章中，该虚词在该章出现次数占该章统计的全部虚词出现的次数，生成虚词频率矩阵</span><br>sdata=np.zeros([<span class="hljs-built_in">len</span>(cdata),<span class="hljs-built_in">len</span>(big_xuci)])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cdata)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(big_xuci)):<br>        sdata[i,j]=cdata[i,j]/<span class="hljs-built_in">sum</span>(cdata[i])<br>            <br>    <span class="hljs-comment">#数据归一化</span><br>scaler=MinMaxScaler().fit(sdata)<br>ndata=scaler.transform(sdata)<br></code></pre></td></tr></table></figure><h4 id="2-聚类算法"><a href="#2-聚类算法" class="headerlink" title="2. 聚类算法"></a>2. 聚类算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据检查</span><br>data=ndata<br>data.shape<br></code></pre></td></tr></table></figure><pre><code class="hljs">(120, 45)</code></pre><h5 id="2-1-k-means聚类"><a href="#2-1-k-means聚类" class="headerlink" title="2.1 k-means聚类"></a>2.1 k-means聚类</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1------kmeans聚类------</span><br>kmeans=KMeans(n_clusters=<span class="hljs-number">2</span>).fit(data)<br>author = kmeans.labels_<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------------K-Means聚类------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;全章回结果:\n&#x27;</span>,author)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;前80回结果:\n&#x27;</span>,author[:<span class="hljs-number">80</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;后40回结果:\n&#x27;</span>,author[<span class="hljs-number">80</span>:])<br></code></pre></td></tr></table></figure><pre><code class="hljs">------------K-Means聚类------------全章回结果: [1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 1 1 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]前80回结果: [1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 1 1 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1]后40回结果: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]</code></pre><h5 id="2-2-层次聚类"><a href="#2-2-层次聚类" class="headerlink" title="2.2 层次聚类"></a>2.2 层次聚类</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># #3------层次聚类------</span><br><span class="hljs-comment"># agg = AgglomerativeClustering(linkage=&#x27;ward&#x27;, n_clusters=2).fit(data)</span><br><span class="hljs-comment"># print(&#x27;------------层次聚类------------&#x27;)</span><br><span class="hljs-comment"># print(&#x27;全章回结果:\n&#x27;,agg.labels_)</span><br><span class="hljs-comment"># print(&#x27;前80回结果:\n&#x27;,agg.labels_[:80])</span><br><span class="hljs-comment"># print(&#x27;后40回结果:\n&#x27;,agg.labels_[80:])</span><br></code></pre></td></tr></table></figure><p>效果不太好(´,,•ω•,,‘),我们选择淘汰此方法。</p><h4 id="3-朴素贝叶斯方法"><a href="#3-朴素贝叶斯方法" class="headerlink" title="3. 朴素贝叶斯方法"></a>3. 朴素贝叶斯方法</h4><p>用于多项式模型的朴素贝叶斯分类器</p><p>多项式朴素贝叶斯分类器适用于具有离散特征的分类（例如，用于文本分类的字数统计）。多项式分布通常需要整数特征计数。但是，实际上，小数计数（例如tf-idf）也可能起作用。</p><p>在使用贝叶斯分类之前，为了便于处理问题，我们进行如下的假设。首先，我们将问题定义为二分类问题，即假设前面某部分由曹雪芹所写，后面某部分由另一个人所写（如高鹗）。朴素贝叶斯方法为有监督的方法，需要先进行标注。我们基于前面的假设同时尽量可能充分地训练模型，将最前面（前40章）标注为作者0；将最后面（后20章）标注为作者1。因此第41-100章为待分类数据，从而划分训练数据和预测数据。</p><h5 id="3-1-添加标签"><a href="#3-1-添加标签" class="headerlink" title="3.1 添加标签"></a>3.1 添加标签</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 添加标签</span><br>npdata=pd.DataFrame(cdata)<br><br>traindata0=npdata[:<span class="hljs-number">40</span>]<br>traindata1=npdata[<span class="hljs-number">100</span>:]<br>traindata0[<span class="hljs-string">&#x27;label&#x27;</span>]=<span class="hljs-number">0</span>;<br>traindata1[<span class="hljs-string">&#x27;label&#x27;</span>]=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><pre><code class="hljs">C:\Users\admin\AppData\Local\Temp/ipykernel_25524/1077375511.py:6: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.Try using .loc[row_indexer,col_indexer] = value insteadSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy  traindata0[&#39;label&#39;]=0;C:\Users\admin\AppData\Local\Temp/ipykernel_25524/1077375511.py:7: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.Try using .loc[row_indexer,col_indexer] = value insteadSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy  traindata1[&#39;label&#39;]=1;</code></pre><h5 id="3-2-数据集划分"><a href="#3-2-数据集划分" class="headerlink" title="3.2 数据集划分"></a>3.2 数据集划分</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 拆分训练集和测试集（待分类）</span><br>traindata = pd.concat([traindata0,traindata1])<br>testdata = pd.DataFrame(cdata[<span class="hljs-number">40</span>:<span class="hljs-number">100</span>])<br><br>X = traindata.iloc[:,:<span class="hljs-number">45</span>]<br>Y = traindata[<span class="hljs-string">&#x27;label&#x27;</span>]<br></code></pre></td></tr></table></figure><h5 id="3-3-训练与分类"><a href="#3-3-训练与分类" class="headerlink" title="3.3 训练与分类"></a>3.3 训练与分类</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mnb = MultinomialNB()<br>mnb.fit(X, Y)<br>label_predict = mnb.predict(testdata)<br></code></pre></td></tr></table></figure><p>结果展示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------------Naive Bayes model------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;41-80章节的贝叶斯分类结果为：&quot;</span>)<br>label_predict[:<span class="hljs-number">40</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">------------Naive Bayes model------------41-80章节的贝叶斯分类结果为：array([0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;81-100章节的贝叶斯分类结果为：&quot;</span>)<br>label_predict[<span class="hljs-number">40</span>:]<br></code></pre></td></tr></table></figure><pre><code class="hljs">81-100章节的贝叶斯分类结果为：array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1],      dtype=int64)</code></pre><p>虽然模型建立的依赖于我们的假设，且训练数据较少，但是分类的结果还是很理想的。:.ﾟヽ(｡◕‿◕｡)ﾉﾟ.:｡+ﾟ</p>]]></content>
    
    
    <categories>
      
      <category>Text Mining</category>
      
      <category>ML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
      <tag>Text Mining</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天猫复购预测(天池)</title>
    <link href="/2022/11/24/%E5%A4%A9%E7%8C%AB%E5%A4%8D%E8%B4%AD%E9%A2%84%E6%B5%8B(%E5%A4%A9%E6%B1%A0)/"/>
    <url>/2022/11/24/%E5%A4%A9%E7%8C%AB%E5%A4%8D%E8%B4%AD%E9%A2%84%E6%B5%8B(%E5%A4%A9%E6%B1%A0)/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>阿里云天池官网，天猫复购预测之挑战Baseline：<a href="https://tianchi.aliyun.com/competition/entrance/231576/rankingList">https://tianchi.aliyun.com/competition/entrance/231576/rankingList</a><br>（官方给出的模型评价指标基于roc_auc_score，天池官方Baseline解决方案得分为0.704954）</p><h3 id="1-任务描述："><a href="#1-任务描述：" class="headerlink" title="1.任务描述："></a>1.任务描述：</h3><p>双十一活动通常可以为商家带来很多新客户，但其中只有一小部分会成为其忠实客户。对于商家来说，准确识别出哪些消费者更可能再次从他这购买产品，可以让商家更有针对性的做营销运营，从而减少成本，提升投资回报。</p><p>本分析报告选取了来自天池的公开数据集（详见天猫复购数据），旨在根据消费者双十一前6个月和双十一当天的购物记录信息，预测其在特定商家的复购概率。</p><p>本报告分为几部分：首先清洗数据，然后根据已有数据构建特征，再根据特征训练模型，最后选取表现最优的模型进行预测。</p><h3 id="2-选题背景："><a href="#2-选题背景：" class="headerlink" title="2.选题背景："></a>2.选题背景：</h3><p>商家有时会在特定日期，例如Boxing-day，黑色星期五或是双十一（11月11日）开展大型促销活动或者发放优惠券以吸引消费者，然而很多被吸引来的买家都是一次性消费者，这些促销活动可能对销售业绩的增长并没有长远帮助，因此为解决这个问题，商家需要识别出哪类消费者可以转化为重复购买者。通过对这些潜在的忠诚客户进行定位，商家可以大大降低促销成本，提高投资回报率（Return on Investment, ROI）。众所周知的是，在线投放广告时精准定位客户是件比较难的事情，尤其是针对新消费者的定位。不过，利用天猫长期积累的用户行为日志，我们或许可以解决这个问题。</p><p>我们提供了一些商家信息，以及在“双十一”期间购买了对应产品的新消费者信息。你的任务是预测给定的商家中，哪些新消费者在未来会成为忠实客户，即需要预测这些新消费者在6个月内再次购买的概率。</p><h3 id="3-数据描述："><a href="#3-数据描述：" class="headerlink" title="3.数据描述："></a>3.数据描述：</h3><p>数据集包含了匿名用户在 “双十一 “前6个月和”双十一 “当天的购物记录，标签为是否是重复购买者。出于隐私保护，数据采样存在部分偏差，该数据集的统计结果会与天猫的实际情况有一定的偏差，但不影响解决方案的适用性。训练集和测试集数据见文件data_format2.zip，数据详情见下表。<br>字段名称|描述<br>:-|:-<br>user_id|购物者的唯一ID编码<br>age_range|用户年龄范围。<br>gender|用户性别。0表示女性，1表示男性，2和NULL表示未知<br>merchant_id|商家的唯一ID编码<br>label|取值集合为{0, 1, -1, NULL}。取1表示’userid’是’merchantid’的重复买家，取0则反之。取-1表示’user_id’不是给定商家的新客户，因此不在我们预测范围内，但这些记录可能会提供额外信息。测试集这一部分需要预测，因此为NULL。<br>activity_log|{userid, merchantid}之间的每组交易中都记录有itemid, categoryid, brand_id, time，用#分隔。记录不按任何特定顺序排序。</p><p>我们还以另一种格式提供了相同数据集，可能更方便做特征工程，详情见<code>data_format1.zip</code>文件夹（内含4个文件），数据描述如下。</p><ul><li>用户日志行为</li></ul><table><thead><tr><th align="left">字段名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">user_id</td><td align="left">购物者的唯一ID编码</td></tr><tr><td align="left">item_id</td><td align="left">商品的唯一编码</td></tr><tr><td align="left">cat_id</td><td align="left">商品所属品类的唯一编码</td></tr><tr><td align="left">merchant_id</td><td align="left">商家的唯一ID编码</td></tr><tr><td align="left">brand_id</td><td align="left">商品品牌的唯一编码</td></tr><tr><td align="left">time_tamp</td><td align="left">购买时间（格式：mmdd）action_type包含{0, 1, 2, 3}，0表示单击，1表示添加到购物车，2表示购买，3表示添加到收藏夹</td></tr></tbody></table><ul><li>用户画像</li></ul><table><thead><tr><th align="left">字段名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">user_id</td><td align="left">购物者的唯一ID编码</td></tr><tr><td align="left">age_range</td><td align="left">用户年龄范围。</td></tr><tr><td align="left">gender</td><td align="left">用户性别。0表示女性，1表示男性，2和NULL表示未知</td></tr></tbody></table><ul><li>训练集和测试集</li></ul><table><thead><tr><th align="left">字段名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">user_id</td><td align="left">购物者的唯一ID编码</td></tr><tr><td align="left">merchant_id</td><td align="left">商家的唯一ID编码</td></tr><tr><td align="left">label</td><td align="left">包含{0, 1}，1表示重复买家，0表示非重复买家。测试集这一部分需要预测，因此为空。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import libraries</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><br><span class="hljs-comment"># 对pandas和matplotlib 的显示设置</span><br>pd.set_option(<span class="hljs-string">&#x27;display.max_columns&#x27;</span>, <span class="hljs-number">30</span>)<br>plt.rcParams.update(&#123;<span class="hljs-string">&quot;font.family&quot;</span>:<span class="hljs-string">&quot;SimHei&quot;</span>,<span class="hljs-string">&quot;font.size&quot;</span>:<span class="hljs-number">14</span>&#125;)<br>plt.style.use(<span class="hljs-string">&quot;tableau-colorblind10&quot;</span>)<br><br><br><span class="hljs-comment"># # matplotlib支持中文</span><br><span class="hljs-comment"># plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]  # 用来正常显示中文标签</span><br><span class="hljs-comment"># plt.rcParams[&#x27;axes.unicode_minus&#x27;] = False  # 用来正常显示负号</span><br>%matplotlib inline<br></code></pre></td></tr></table></figure><h2 id="1-数据清洗"><a href="#1-数据清洗" class="headerlink" title="1. 数据清洗"></a>1. 数据清洗</h2><p>清洗步骤：</p><ul><li>数据类型检查</li><li>压缩数据</li><li>空值处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># load data</span><br><span class="hljs-comment"># data_user_log = pd.read_csv(&quot;/home/mw/input/tmall_repurch6487/data/user_log_format1.csv&quot;)  # 初次导入数据时启用</span><br>data_user_info = pd.read_csv(<span class="hljs-string">&quot;./data/user_info_format1.csv&quot;</span>)<br>data_train = pd.read_csv(<span class="hljs-string">&quot;./data/train_format1.csv&quot;</span>)<br>data_test = pd.read_csv(<span class="hljs-string">&quot;./data/test_format1.csv&quot;</span>)<br></code></pre></td></tr></table></figure><p>压缩内存：调整数据类型，将原来int64调整为合适的大小，例如:int32、int16、int8，以达到压缩内存的目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 二次导入数据时，指定数据类型以压缩内存</span><br>d_types = &#123;<span class="hljs-string">&#x27;user_id&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-string">&#x27;item_id&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-string">&#x27;cat_id&#x27;</span>: <span class="hljs-string">&#x27;int16&#x27;</span>, <span class="hljs-string">&#x27;seller_id&#x27;</span>: <span class="hljs-string">&#x27;int16&#x27;</span>, <span class="hljs-string">&#x27;brand_id&#x27;</span>: <span class="hljs-string">&#x27;float32&#x27;</span>, <span class="hljs-string">&#x27;time_stamp&#x27;</span>: <span class="hljs-string">&#x27;int16&#x27;</span>, <span class="hljs-string">&#x27;action_type&#x27;</span>: <span class="hljs-string">&#x27;int8&#x27;</span>&#125;<br>data_user_log = pd.read_csv(<span class="hljs-string">&quot;./data/user_log_format1.csv&quot;</span>,dtype = d_types)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># check tables</span><br>display(data_user_log.head(<span class="hljs-number">1</span>))<br>display(data_user_info.head(<span class="hljs-number">1</span>))<br>display(data_train.head(<span class="hljs-number">1</span>))<br>display(data_test.head(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>item_id</th>      <th>cat_id</th>      <th>seller_id</th>      <th>brand_id</th>      <th>time_stamp</th>      <th>action_type</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>328862</td>      <td>323294</td>      <td>833</td>      <td>2882</td>      <td>2661.0</td>      <td>829</td>      <td>0</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>age_range</th>      <th>gender</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>376517</td>      <td>6.0</td>      <td>1.0</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0</td>    </tr>  </tbody></table></div><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>prob</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>163968</td>      <td>4605</td>      <td>NaN</td>    </tr>  </tbody></table></div><h3 id="1-1-数据类型检查"><a href="#1-1-数据类型检查" class="headerlink" title="1.1 数据类型检查"></a>1.1 数据类型检查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># check table info</span><br>display(data_user_log.info())<br>display(data_user_info.info())<br>display(data_train.info())<br>display(data_test.info())<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 54925330 entries, 0 to 54925329Data columns (total 7 columns): #   Column       Dtype  ---  ------       -----   0   user_id      int32   1   item_id      int32   2   cat_id       int16   3   seller_id    int16   4   brand_id     float32 5   time_stamp   int16   6   action_type  int8   dtypes: float32(1), int16(3), int32(2), int8(1)memory usage: 995.2 MBNone&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 424170 entries, 0 to 424169Data columns (total 3 columns): #   Column     Non-Null Count   Dtype  ---  ------     --------------   -----   0   user_id    424170 non-null  int64   1   age_range  421953 non-null  float64 2   gender     417734 non-null  float64dtypes: float64(2), int64(1)memory usage: 9.7 MBNone&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 260864 entries, 0 to 260863Data columns (total 3 columns): #   Column       Non-Null Count   Dtype---  ------       --------------   ----- 0   user_id      260864 non-null  int64 1   merchant_id  260864 non-null  int64 2   label        260864 non-null  int64dtypes: int64(3)memory usage: 6.0 MBNone&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 261477 entries, 0 to 261476Data columns (total 3 columns): #   Column       Non-Null Count   Dtype  ---  ------       --------------   -----   0   user_id      261477 non-null  int64   1   merchant_id  261477 non-null  int64   2   prob         0 non-null       float64dtypes: float64(1), int64(2)memory usage: 6.0 MBNone</code></pre><p>训练集和测试集都有约26万条数据。</p><h3 id="1-2-压缩数据"><a href="#1-2-压缩数据" class="headerlink" title="1.2 压缩数据"></a>1.2 压缩数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 拼接train、test数据，方便下一步提取特征</span><br>data_train[<span class="hljs-string">&quot;origin&quot;</span>] = <span class="hljs-string">&quot;train&quot;</span><br>data_test[<span class="hljs-string">&quot;origin&quot;</span>] = <span class="hljs-string">&quot;test&quot;</span><br>data = pd.concat([data_train,data_test],sort = <span class="hljs-literal">False</span>)<br>data = data.drop([<span class="hljs-string">&quot;prob&quot;</span>],axis = <span class="hljs-number">1</span>)<br>data.info()<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 522341 entries, 0 to 261476Data columns (total 4 columns): #   Column       Non-Null Count   Dtype  ---  ------       --------------   -----   0   user_id      522341 non-null  int64   1   merchant_id  522341 non-null  int64   2   label        260864 non-null  float64 3   origin       522341 non-null  object dtypes: float64(1), int64(2), object(1)memory usage: 19.9+ MB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 所有列都是数值型，直接downcast</span><br><span class="hljs-comment"># 初次压缩时，对所有数据集进行压缩</span><br><span class="hljs-built_in">list</span> = [data,data_user_log,data_user_info]<br><br><span class="hljs-comment"># 二次导入时无需重复data_user_log压缩</span><br><span class="hljs-built_in">list</span> = [data,data_user_info]<br><br><span class="hljs-keyword">for</span> df <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>    fcols = df.select_dtypes(<span class="hljs-string">&#x27;float&#x27;</span>).columns<br>    icols = df.select_dtypes(<span class="hljs-string">&#x27;integer&#x27;</span>).columns<br>    df[fcols] = df[fcols].apply(pd.to_numeric, downcast=<span class="hljs-string">&#x27;float&#x27;</span>)<br>    df[icols] = df[icols].apply(pd.to_numeric, downcast=<span class="hljs-string">&#x27;integer&#x27;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># check table info again</span><br>display(data_user_log.info())<br>display(data_user_info.info())<br>display(data.info())<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 54925330 entries, 0 to 54925329Data columns (total 7 columns): #   Column       Dtype  ---  ------       -----   0   user_id      int32   1   item_id      int32   2   cat_id       int16   3   seller_id    int16   4   brand_id     float32 5   time_stamp   int16   6   action_type  int8   dtypes: float32(1), int16(3), int32(2), int8(1)memory usage: 995.2 MBNone&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 424170 entries, 0 to 424169Data columns (total 3 columns): #   Column     Non-Null Count   Dtype  ---  ------     --------------   -----   0   user_id    424170 non-null  int32   1   age_range  421953 non-null  float32 2   gender     417734 non-null  float32dtypes: float32(2), int32(1)memory usage: 4.9 MBNone&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 522341 entries, 0 to 261476Data columns (total 4 columns): #   Column       Non-Null Count   Dtype  ---  ------       --------------   -----   0   user_id      522341 non-null  int32   1   merchant_id  522341 non-null  int16   2   label        260864 non-null  float32 3   origin       522341 non-null  object dtypes: float32(1), int16(1), int32(1), object(1)memory usage: 13.0+ MBNone</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 记录数据类型，二次导入时用</span><br>d_col = data_user_log.dtypes.index<br>d_type = [i.name <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data_user_log.dtypes.values]<br>column_dict = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(d_col,d_type))<br><span class="hljs-built_in">print</span>(column_dict)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#123;&#39;user_id&#39;: &#39;int32&#39;, &#39;item_id&#39;: &#39;int32&#39;, &#39;cat_id&#39;: &#39;int16&#39;, &#39;seller_id&#39;: &#39;int16&#39;, &#39;brand_id&#39;: &#39;float32&#39;, &#39;time_stamp&#39;: &#39;int16&#39;, &#39;action_type&#39;: &#39;int8&#39;&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统一字段名</span><br>data_user_log.rename(columns = &#123;<span class="hljs-string">&quot;seller_id&quot;</span>:<span class="hljs-string">&quot;merchant_id&quot;</span>&#125;,inplace = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="1-3-空值处理"><a href="#1-3-空值处理" class="headerlink" title="1.3 空值处理"></a>1.3 空值处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 年龄、性别列存在null值，填补空值</span><br>data_user_info[<span class="hljs-string">&quot;age_range&quot;</span>].fillna(<span class="hljs-number">0</span>,inplace = <span class="hljs-literal">True</span>)  <span class="hljs-comment"># 0和null代表未知</span><br>data_user_info[<span class="hljs-string">&quot;gender&quot;</span>].fillna(<span class="hljs-number">0</span>,inplace = <span class="hljs-literal">True</span>)  <span class="hljs-comment"># 2和null代表未知</span><br><br>data_user_info.info()<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 424170 entries, 0 to 424169Data columns (total 3 columns): #   Column     Non-Null Count   Dtype  ---  ------     --------------   -----   0   user_id    424170 non-null  int32   1   age_range  424170 non-null  float32 2   gender     424170 non-null  float32dtypes: float32(2), int32(1)memory usage: 4.9 MB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 检查user_log空值</span><br>data_user_log.isna().<span class="hljs-built_in">sum</span>()<br></code></pre></td></tr></table></figure><pre><code class="hljs">user_id            0item_id            0cat_id             0merchant_id        0brand_id       91015time_stamp         0action_type        0dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># brand_id列有较多空值，以0填充</span><br>data_user_log[<span class="hljs-string">&quot;brand_id&quot;</span>].fillna(<span class="hljs-number">0</span>, inplace = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="1-4-数据初步探索"><a href="#1-4-数据初步探索" class="headerlink" title="1.4 数据初步探索"></a>1.4 数据初步探索</h3><p>下一步对数据进行初步可视化，检视数据特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用户年龄分布</span><br>tags = data_user_info.age_range.value_counts().sort_index()<br>age = pd.DataFrame(tags)<br>age[<span class="hljs-string">&quot;index&quot;</span>] = <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tags))<br>ax = sns.barplot(x=<span class="hljs-string">&quot;index&quot;</span>, y=<span class="hljs-string">&quot;age_range&quot;</span>, data=age, palette=<span class="hljs-string">&quot;Blues&quot;</span>)<br>ax.tick_params(labelsize=<span class="hljs-number">10</span>)<br>ax.set_title(<span class="hljs-string">&#x27;age distribution&#x27;</span>,fontsize=<span class="hljs-number">12</span>)<br>ax.set_xlabel(<span class="hljs-string">&#x27;&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Text(0, 0.5, &#39;&#39;)</code></pre><p><img src="/img/t_output_24_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用户性别分布</span><br>sizes = data_user_info.gender.value_counts().sort_index()<br><br>labels = [<span class="hljs-string">&#x27;女性&#x27;</span>, <span class="hljs-string">&#x27;男性&#x27;</span>, <span class="hljs-string">&#x27;未知&#x27;</span>]<br>colors = [<span class="hljs-string">&#x27;lightcoral&#x27;</span>, <span class="hljs-string">&#x27;lightskyblue&#x27;</span>,  <span class="hljs-string">&#x27;yellowgreen&#x27;</span>]<br>explode = (<span class="hljs-number">0.1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><br>patches,l_text,p_text = plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct=<span class="hljs-string">&#x27;%1.1f%%&#x27;</span>, shadow=<span class="hljs-literal">True</span>, startangle=<span class="hljs-number">90</span>)<br>plt.axis(<span class="hljs-string">&#x27;equal&#x27;</span>)<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> l_text:<br>    t.set_size(<span class="hljs-number">14</span>)<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> p_text:<br>    t.set_size(<span class="hljs-number">10</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/img/t_output_25_0.png" alt="png"></p><p>用户年龄1表示&lt;18岁，2表示18-24岁，3表示25-29岁，4表示30-34岁，5表示35-39岁，6表示40-49岁，7、8表示50岁以上，0表示未知。<br>性别0表示女性，1表示男性，2表示未知。<br>可以看出用户主要集中在25-29岁，女性较多。<br>出于隐私保护，数据采样存在部分偏差，结果并不代表天猫实际情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用户操作类型分布</span><br>sizes = data_user_log.action_type.value_counts().sort_index()<br><span class="hljs-comment"># tags.plot.bar()</span><br>labels = [<span class="hljs-string">&#x27;单击&#x27;</span>, <span class="hljs-string">&#x27;购物车&#x27;</span>, <span class="hljs-string">&#x27;购买&#x27;</span>, <span class="hljs-string">&#x27;收藏夹&#x27;</span>]  <span class="hljs-comment"># 定义标签</span><br>colors = [<span class="hljs-string">&#x27;lightskyblue&#x27;</span>, <span class="hljs-string">&#x27;yellowgreen&#x27;</span>, <span class="hljs-string">&#x27;gold&#x27;</span>, <span class="hljs-string">&#x27;lightcoral&#x27;</span>]  <span class="hljs-comment"># 每一块的颜色</span><br>explode = (<span class="hljs-number">0.1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 突出显示，这里仅仅突出显示第二块（即&#x27;Hogs&#x27;）</span><br><br>patches,l_text,p_text = plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct=<span class="hljs-string">&#x27;%1.1f%%&#x27;</span>, shadow=<span class="hljs-literal">True</span>, startangle=<span class="hljs-number">90</span>)<br>plt.axis(<span class="hljs-string">&#x27;equal&#x27;</span>)  <span class="hljs-comment"># 显示为圆（避免比例压缩为椭圆）</span><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> l_text:<br>    t.set_size(<span class="hljs-number">14</span>)<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> p_text:<br>    t.set_size(<span class="hljs-number">10</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/img/t_output_27_0.png" alt="png"></p><p>操作类型中0表示单击，1表示添加到购物车，2表示购买，3表示添加到收藏夹。<br>大部分用户都只是进行点击操作，添加购物车的比较少，多为直接购买或添加收藏夹。</p><h2 id="2-构建特征"><a href="#2-构建特征" class="headerlink" title="2. 构建特征"></a>2. 构建特征</h2><p>从业务上思考可能影响复购的因素有：  </p><ul><li>用户特征：年龄，性别，喜好的产品类型，购买习惯（网购频率、购买点击比等），喜欢尝鲜还是习惯固定店家购买</li><li>商家特征：产品结构，流量（用户交互频次、交互天数），口碑（购买点击比），产品评价（用户复购率）</li><li>用户-商家特征：用户喜好与商家产品的相似性</li></ul><p>因此我们针对用户、商家、用户-商家来分别构建以下特征：</p><ul><li>交互次数、交互天数</li><li>交互过的商品、品类、品牌、用户/商家数</li><li>点击、加购物车、购买、收藏的操作次数</li><li>购买点击比</li><li>复购率</li><li>用户性别、年龄</li></ul><h3 id="2-1-用户特征"><a href="#2-1-用户特征" class="headerlink" title="2.1 用户特征"></a>2.1 用户特征</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按user_id分组</span><br>groups = data_user_log.groupby([<span class="hljs-string">&quot;user_id&quot;</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计交互总次数</span><br>temp = groups.size().reset_index().rename(columns = &#123;<span class="hljs-number">0</span>:<span class="hljs-string">&quot;u1&quot;</span>&#125;)<br>data = pd.merge(data,temp, on =<span class="hljs-string">&quot;user_id&quot;</span>,how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计交互天数</span><br>temp = groups.time_stamp.nunique().reset_index().rename(columns = &#123;<span class="hljs-string">&quot;time_stamp&quot;</span>:<span class="hljs-string">&quot;u2&quot;</span>&#125;)<br>data = data.merge(temp,on =<span class="hljs-string">&quot;user_id&quot;</span>,how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计交互过的商品、品类、品牌、商家数</span><br>temp = groups[[<span class="hljs-string">&#x27;item_id&#x27;</span>,<span class="hljs-string">&#x27;cat_id&#x27;</span>,<span class="hljs-string">&#x27;merchant_id&#x27;</span>,<span class="hljs-string">&#x27;brand_id&#x27;</span>]].nunique().reset_index().rename(columns=&#123;<br>    <span class="hljs-string">&#x27;item_id&#x27;</span>:<span class="hljs-string">&#x27;u3&#x27;</span>,<span class="hljs-string">&#x27;cat_id&#x27;</span>:<span class="hljs-string">&#x27;u4&#x27;</span>,<span class="hljs-string">&#x27;merchant_id&#x27;</span>:<span class="hljs-string">&#x27;u5&#x27;</span>,<span class="hljs-string">&#x27;brand_id&#x27;</span>:<span class="hljs-string">&#x27;u6&#x27;</span>&#125;)<br>data = data.merge(temp,on =<span class="hljs-string">&quot;user_id&quot;</span>,how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计点击、加购物车、购买、收藏的操作次数</span><br>temp = groups[<span class="hljs-string">&#x27;action_type&#x27;</span>].value_counts().unstack().reset_index().rename(columns=&#123;<span class="hljs-number">0</span>:<span class="hljs-string">&#x27;u7&#x27;</span>, <span class="hljs-number">1</span>:<span class="hljs-string">&#x27;u8&#x27;</span>, <span class="hljs-number">2</span>:<span class="hljs-string">&#x27;u9&#x27;</span>, <span class="hljs-number">3</span>:<span class="hljs-string">&#x27;u10&#x27;</span>&#125;)<br>data = data.merge(temp,on =<span class="hljs-string">&quot;user_id&quot;</span>,how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计购买点击比</span><br>data[<span class="hljs-string">&quot;u11&quot;</span>] = data[<span class="hljs-string">&quot;u9&quot;</span>]/data[<span class="hljs-string">&quot;u7&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 复购率 = 复购过的商家数/购买过的总商家数</span><br><span class="hljs-comment"># 按user_id,merchant_id分组，购买天数&gt;1则复购标记为1，反之为0</span><br>groups_rb = data_user_log[data_user_log[<span class="hljs-string">&quot;action_type&quot;</span>]==<span class="hljs-number">2</span>].groupby([<span class="hljs-string">&quot;user_id&quot;</span>,<span class="hljs-string">&quot;merchant_id&quot;</span>])<br>temp_rb = groups_rb.time_stamp.nunique().reset_index().rename(columns = &#123;<span class="hljs-string">&quot;time_stamp&quot;</span>:<span class="hljs-string">&quot;n_days&quot;</span>&#125;)<br>temp_rb[<span class="hljs-string">&quot;label_um&quot;</span>] = [(<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> temp_rb[<span class="hljs-string">&quot;n_days&quot;</span>]]<br><br><span class="hljs-comment"># 与data进行匹配</span><br>temp = temp_rb.groupby([<span class="hljs-string">&quot;user_id&quot;</span>,<span class="hljs-string">&quot;label_um&quot;</span>]).size().unstack(fill_value=<span class="hljs-number">0</span>).reset_index()<br>temp[<span class="hljs-string">&quot;u12&quot;</span>] = temp[<span class="hljs-number">1</span>]/(temp[<span class="hljs-number">0</span>]+temp[<span class="hljs-number">1</span>])<br><br>data = data.merge(temp[[<span class="hljs-string">&quot;user_id&quot;</span>,<span class="hljs-string">&quot;u12&quot;</span>]],on =<span class="hljs-string">&quot;user_id&quot;</span>,how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>      <th>u11</th>      <th>u12</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 性别、年龄独热编码处理</span><br>data = data.merge(data_user_info,on =<span class="hljs-string">&quot;user_id&quot;</span>,how = <span class="hljs-string">&quot;left&quot;</span>)<br><br>temp = pd.get_dummies(data[<span class="hljs-string">&quot;age_range&quot;</span>],prefix = <span class="hljs-string">&quot;age&quot;</span>)<br>temp2 = pd.get_dummies(data[<span class="hljs-string">&quot;gender&quot;</span>],prefix = <span class="hljs-string">&quot;gender&quot;</span>)<br><br>data = pd.concat([data,temp,temp2],axis = <span class="hljs-number">1</span>)<br>data.drop(columns = [<span class="hljs-string">&quot;age_range&quot;</span>,<span class="hljs-string">&quot;gender&quot;</span>],inplace = <span class="hljs-literal">True</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>      <th>u11</th>      <th>u12</th>      <th>age_0.0</th>      <th>age_1.0</th>      <th>age_2.0</th>      <th>age_3.0</th>      <th>age_4.0</th>      <th>age_5.0</th>      <th>age_6.0</th>      <th>age_7.0</th>      <th>age_8.0</th>      <th>gender_0.0</th>      <th>gender_1.0</th>      <th>gender_2.0</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table></div><h3 id="2-2-商家特征"><a href="#2-2-商家特征" class="headerlink" title="2.2 商家特征"></a>2.2 商家特征</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按merchant_id分组</span><br>groups = data_user_log.groupby([<span class="hljs-string">&quot;merchant_id&quot;</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计交互总次数</span><br>temp = groups.size().reset_index().rename(columns = &#123;<span class="hljs-number">0</span>:<span class="hljs-string">&quot;m1&quot;</span>&#125;)<br>data = pd.merge(data,temp, on =<span class="hljs-string">&quot;merchant_id&quot;</span>,how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>      <th>u11</th>      <th>u12</th>      <th>age_0.0</th>      <th>age_1.0</th>      <th>age_2.0</th>      <th>age_3.0</th>      <th>age_4.0</th>      <th>age_5.0</th>      <th>age_6.0</th>      <th>age_7.0</th>      <th>age_8.0</th>      <th>gender_0.0</th>      <th>gender_1.0</th>      <th>gender_2.0</th>      <th>m1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>16269</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>79865</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>7269</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计交互天数</span><br>temp = groups.time_stamp.nunique().reset_index().rename(columns = &#123;<span class="hljs-string">&quot;time_stamp&quot;</span>:<span class="hljs-string">&quot;m2&quot;</span>&#125;)<br>data = data.merge(temp,on =<span class="hljs-string">&quot;merchant_id&quot;</span>,how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>      <th>u11</th>      <th>u12</th>      <th>age_0.0</th>      <th>age_1.0</th>      <th>age_2.0</th>      <th>age_3.0</th>      <th>age_4.0</th>      <th>age_5.0</th>      <th>age_6.0</th>      <th>age_7.0</th>      <th>age_8.0</th>      <th>gender_0.0</th>      <th>gender_1.0</th>      <th>gender_2.0</th>      <th>m1</th>      <th>m2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>16269</td>      <td>185</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>79865</td>      <td>185</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>0.045455</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>7269</td>      <td>155</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计交互过的商品、品类、品牌、用户数</span><br>temp = groups[[<span class="hljs-string">&#x27;item_id&#x27;</span>,<span class="hljs-string">&#x27;cat_id&#x27;</span>,<span class="hljs-string">&#x27;user_id&#x27;</span>,<span class="hljs-string">&#x27;brand_id&#x27;</span>]].nunique().reset_index().rename(columns=&#123;<br>    <span class="hljs-string">&#x27;item_id&#x27;</span>:<span class="hljs-string">&#x27;m3&#x27;</span>,<span class="hljs-string">&#x27;cat_id&#x27;</span>:<span class="hljs-string">&#x27;m4&#x27;</span>,<span class="hljs-string">&#x27;user_id&#x27;</span>:<span class="hljs-string">&#x27;m5&#x27;</span>,<span class="hljs-string">&#x27;brand_id&#x27;</span>:<span class="hljs-string">&#x27;m6&#x27;</span>&#125;)<br>data = data.merge(temp,on =<span class="hljs-string">&quot;merchant_id&quot;</span>,how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>      <th>u11</th>      <th>...</th>      <th>age_3.0</th>      <th>age_4.0</th>      <th>age_5.0</th>      <th>age_6.0</th>      <th>age_7.0</th>      <th>age_8.0</th>      <th>gender_0.0</th>      <th>gender_1.0</th>      <th>gender_2.0</th>      <th>m1</th>      <th>m2</th>      <th>m3</th>      <th>m4</th>      <th>m5</th>      <th>m6</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>16269</td>      <td>185</td>      <td>308</td>      <td>20</td>      <td>5819</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>79865</td>      <td>185</td>      <td>1179</td>      <td>26</td>      <td>10931</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>7269</td>      <td>155</td>      <td>67</td>      <td>15</td>      <td>2281</td>      <td>2</td>    </tr>  </tbody></table><p>3 rows × 34 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计点击、加购物车、购买、收藏的操作次数</span><br>temp = groups[<span class="hljs-string">&#x27;action_type&#x27;</span>].value_counts().unstack().reset_index().rename(columns=&#123;<span class="hljs-number">0</span>:<span class="hljs-string">&#x27;m7&#x27;</span>, <span class="hljs-number">1</span>:<span class="hljs-string">&#x27;m8&#x27;</span>, <span class="hljs-number">2</span>:<span class="hljs-string">&#x27;m9&#x27;</span>, <span class="hljs-number">3</span>:<span class="hljs-string">&#x27;m10&#x27;</span>&#125;)<br>data = data.merge(temp,on =<span class="hljs-string">&quot;merchant_id&quot;</span>,how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>      <th>u11</th>      <th>...</th>      <th>age_7.0</th>      <th>age_8.0</th>      <th>gender_0.0</th>      <th>gender_1.0</th>      <th>gender_2.0</th>      <th>m1</th>      <th>m2</th>      <th>m3</th>      <th>m4</th>      <th>m5</th>      <th>m6</th>      <th>m7</th>      <th>m8</th>      <th>m9</th>      <th>m10</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>16269</td>      <td>185</td>      <td>308</td>      <td>20</td>      <td>5819</td>      <td>2</td>      <td>14870.0</td>      <td>28.0</td>      <td>410.0</td>      <td>961.0</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>79865</td>      <td>185</td>      <td>1179</td>      <td>26</td>      <td>10931</td>      <td>2</td>      <td>72265.0</td>      <td>121.0</td>      <td>4780.0</td>      <td>2699.0</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>7269</td>      <td>155</td>      <td>67</td>      <td>15</td>      <td>2281</td>      <td>2</td>      <td>6094.0</td>      <td>16.0</td>      <td>963.0</td>      <td>196.0</td>    </tr>  </tbody></table><p>3 rows × 38 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计购买点击比</span><br>data[<span class="hljs-string">&quot;m11&quot;</span>] = data[<span class="hljs-string">&quot;m9&quot;</span>]/data[<span class="hljs-string">&quot;m7&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 复购率 = 复购过的用户数/购买过的总用户数</span><br><span class="hljs-comment"># 按user_id,merchant_id分组，购买天数&gt;1则复购标记为1，反之为0（在上一步已计算）</span><br><span class="hljs-comment"># 与data进行匹配</span><br>temp = temp_rb.groupby([<span class="hljs-string">&quot;merchant_id&quot;</span>,<span class="hljs-string">&quot;label_um&quot;</span>]).size().unstack(fill_value=<span class="hljs-number">0</span>).reset_index()<br>temp[<span class="hljs-string">&quot;m12&quot;</span>] = temp[<span class="hljs-number">1</span>]/(temp[<span class="hljs-number">0</span>]+temp[<span class="hljs-number">1</span>])<br><br>data = data.merge(temp[[<span class="hljs-string">&quot;merchant_id&quot;</span>,<span class="hljs-string">&quot;m12&quot;</span>]],on =<span class="hljs-string">&quot;merchant_id&quot;</span>,how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>      <th>u11</th>      <th>...</th>      <th>gender_0.0</th>      <th>gender_1.0</th>      <th>gender_2.0</th>      <th>m1</th>      <th>m2</th>      <th>m3</th>      <th>m4</th>      <th>m5</th>      <th>m6</th>      <th>m7</th>      <th>m8</th>      <th>m9</th>      <th>m10</th>      <th>m11</th>      <th>m12</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>16269</td>      <td>185</td>      <td>308</td>      <td>20</td>      <td>5819</td>      <td>2</td>      <td>14870.0</td>      <td>28.0</td>      <td>410.0</td>      <td>961.0</td>      <td>0.027572</td>      <td>0.048387</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>79865</td>      <td>185</td>      <td>1179</td>      <td>26</td>      <td>10931</td>      <td>2</td>      <td>72265.0</td>      <td>121.0</td>      <td>4780.0</td>      <td>2699.0</td>      <td>0.066145</td>      <td>0.053014</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>7269</td>      <td>155</td>      <td>67</td>      <td>15</td>      <td>2281</td>      <td>2</td>      <td>6094.0</td>      <td>16.0</td>      <td>963.0</td>      <td>196.0</td>      <td>0.158024</td>      <td>0.084444</td>    </tr>  </tbody></table><p>3 rows × 40 columns</p></div><h3 id="2-3-用户-商家特征"><a href="#2-3-用户-商家特征" class="headerlink" title="2.3 用户-商家特征"></a>2.3 用户-商家特征</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按user_id,merchant_id分组</span><br>groups = data_user_log.groupby([<span class="hljs-string">&#x27;user_id&#x27;</span>,<span class="hljs-string">&#x27;merchant_id&#x27;</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计交互总次数</span><br>temp = groups.size().reset_index().rename(columns = &#123;<span class="hljs-number">0</span>:<span class="hljs-string">&quot;um1&quot;</span>&#125;)<br>data = pd.merge(data,temp, on =[<span class="hljs-string">&quot;merchant_id&quot;</span>,<span class="hljs-string">&quot;user_id&quot;</span>],how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>      <th>u11</th>      <th>...</th>      <th>gender_1.0</th>      <th>gender_2.0</th>      <th>m1</th>      <th>m2</th>      <th>m3</th>      <th>m4</th>      <th>m5</th>      <th>m6</th>      <th>m7</th>      <th>m8</th>      <th>m9</th>      <th>m10</th>      <th>m11</th>      <th>m12</th>      <th>um1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>16269</td>      <td>185</td>      <td>308</td>      <td>20</td>      <td>5819</td>      <td>2</td>      <td>14870.0</td>      <td>28.0</td>      <td>410.0</td>      <td>961.0</td>      <td>0.027572</td>      <td>0.048387</td>      <td>39</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>79865</td>      <td>185</td>      <td>1179</td>      <td>26</td>      <td>10931</td>      <td>2</td>      <td>72265.0</td>      <td>121.0</td>      <td>4780.0</td>      <td>2699.0</td>      <td>0.066145</td>      <td>0.053014</td>      <td>14</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>7269</td>      <td>155</td>      <td>67</td>      <td>15</td>      <td>2281</td>      <td>2</td>      <td>6094.0</td>      <td>16.0</td>      <td>963.0</td>      <td>196.0</td>      <td>0.158024</td>      <td>0.084444</td>      <td>18</td>    </tr>  </tbody></table><p>3 rows × 41 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计交互天数</span><br>temp = groups.time_stamp.nunique().reset_index().rename(columns = &#123;<span class="hljs-string">&quot;time_stamp&quot;</span>:<span class="hljs-string">&quot;um2&quot;</span>&#125;)<br>data = data.merge(temp,on =[<span class="hljs-string">&quot;merchant_id&quot;</span>,<span class="hljs-string">&quot;user_id&quot;</span>],how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>      <th>u11</th>      <th>...</th>      <th>gender_2.0</th>      <th>m1</th>      <th>m2</th>      <th>m3</th>      <th>m4</th>      <th>m5</th>      <th>m6</th>      <th>m7</th>      <th>m8</th>      <th>m9</th>      <th>m10</th>      <th>m11</th>      <th>m12</th>      <th>um1</th>      <th>um2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>16269</td>      <td>185</td>      <td>308</td>      <td>20</td>      <td>5819</td>      <td>2</td>      <td>14870.0</td>      <td>28.0</td>      <td>410.0</td>      <td>961.0</td>      <td>0.027572</td>      <td>0.048387</td>      <td>39</td>      <td>9</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>79865</td>      <td>185</td>      <td>1179</td>      <td>26</td>      <td>10931</td>      <td>2</td>      <td>72265.0</td>      <td>121.0</td>      <td>4780.0</td>      <td>2699.0</td>      <td>0.066145</td>      <td>0.053014</td>      <td>14</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>0</td>      <td>7269</td>      <td>155</td>      <td>67</td>      <td>15</td>      <td>2281</td>      <td>2</td>      <td>6094.0</td>      <td>16.0</td>      <td>963.0</td>      <td>196.0</td>      <td>0.158024</td>      <td>0.084444</td>      <td>18</td>      <td>2</td>    </tr>  </tbody></table><p>3 rows × 42 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计交互过的商品、品类、品牌数</span><br>temp = groups[[<span class="hljs-string">&#x27;item_id&#x27;</span>,<span class="hljs-string">&#x27;cat_id&#x27;</span>,<span class="hljs-string">&#x27;brand_id&#x27;</span>]].nunique().reset_index().rename(columns=&#123;<br>    <span class="hljs-string">&#x27;item_id&#x27;</span>:<span class="hljs-string">&#x27;um3&#x27;</span>,<span class="hljs-string">&#x27;cat_id&#x27;</span>:<span class="hljs-string">&#x27;um4&#x27;</span>,<span class="hljs-string">&#x27;brand_id&#x27;</span>:<span class="hljs-string">&#x27;um5&#x27;</span>&#125;)<br>data = data.merge(temp,on =[<span class="hljs-string">&quot;merchant_id&quot;</span>,<span class="hljs-string">&quot;user_id&quot;</span>],how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>      <th>u11</th>      <th>...</th>      <th>m3</th>      <th>m4</th>      <th>m5</th>      <th>m6</th>      <th>m7</th>      <th>m8</th>      <th>m9</th>      <th>m10</th>      <th>m11</th>      <th>m12</th>      <th>um1</th>      <th>um2</th>      <th>um3</th>      <th>um4</th>      <th>um5</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>308</td>      <td>20</td>      <td>5819</td>      <td>2</td>      <td>14870.0</td>      <td>28.0</td>      <td>410.0</td>      <td>961.0</td>      <td>0.027572</td>      <td>0.048387</td>      <td>39</td>      <td>9</td>      <td>20</td>      <td>6</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>1179</td>      <td>26</td>      <td>10931</td>      <td>2</td>      <td>72265.0</td>      <td>121.0</td>      <td>4780.0</td>      <td>2699.0</td>      <td>0.066145</td>      <td>0.053014</td>      <td>14</td>      <td>3</td>      <td>1</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>67</td>      <td>15</td>      <td>2281</td>      <td>2</td>      <td>6094.0</td>      <td>16.0</td>      <td>963.0</td>      <td>196.0</td>      <td>0.158024</td>      <td>0.084444</td>      <td>18</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>    </tr>  </tbody></table><p>3 rows × 45 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计点击、加购物车、购买、收藏的操作次数</span><br>temp = groups[<span class="hljs-string">&#x27;action_type&#x27;</span>].value_counts().unstack().reset_index().rename(columns=&#123;<span class="hljs-number">0</span>:<span class="hljs-string">&#x27;um6&#x27;</span>, <span class="hljs-number">1</span>:<span class="hljs-string">&#x27;um7&#x27;</span>, <span class="hljs-number">2</span>:<span class="hljs-string">&#x27;um8&#x27;</span>, <span class="hljs-number">3</span>:<span class="hljs-string">&#x27;um9&#x27;</span>&#125;)<br>data = data.merge(temp,on =[<span class="hljs-string">&quot;merchant_id&quot;</span>,<span class="hljs-string">&quot;user_id&quot;</span>],how = <span class="hljs-string">&quot;left&quot;</span>)<br>data.head(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_id</th>      <th>merchant_id</th>      <th>label</th>      <th>origin</th>      <th>u1</th>      <th>u2</th>      <th>u3</th>      <th>u4</th>      <th>u5</th>      <th>u6</th>      <th>u7</th>      <th>u8</th>      <th>u9</th>      <th>u10</th>      <th>u11</th>      <th>...</th>      <th>m7</th>      <th>m8</th>      <th>m9</th>      <th>m10</th>      <th>m11</th>      <th>m12</th>      <th>um1</th>      <th>um2</th>      <th>um3</th>      <th>um4</th>      <th>um5</th>      <th>um6</th>      <th>um7</th>      <th>um8</th>      <th>um9</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>34176</td>      <td>3906</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>14870.0</td>      <td>28.0</td>      <td>410.0</td>      <td>961.0</td>      <td>0.027572</td>      <td>0.048387</td>      <td>39</td>      <td>9</td>      <td>20</td>      <td>6</td>      <td>1</td>      <td>36.0</td>      <td>NaN</td>      <td>1.0</td>      <td>2.0</td>    </tr>    <tr>      <th>1</th>      <td>34176</td>      <td>121</td>      <td>0.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>72265.0</td>      <td>121.0</td>      <td>4780.0</td>      <td>2699.0</td>      <td>0.066145</td>      <td>0.053014</td>      <td>14</td>      <td>3</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>13.0</td>      <td>NaN</td>      <td>1.0</td>      <td>NaN</td>    </tr>    <tr>      <th>2</th>      <td>34176</td>      <td>4356</td>      <td>1.0</td>      <td>train</td>      <td>451</td>      <td>47</td>      <td>256</td>      <td>45</td>      <td>109</td>      <td>108</td>      <td>410.0</td>      <td>NaN</td>      <td>34.0</td>      <td>7.0</td>      <td>0.082927</td>      <td>...</td>      <td>6094.0</td>      <td>16.0</td>      <td>963.0</td>      <td>196.0</td>      <td>0.158024</td>      <td>0.084444</td>      <td>18</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>1</td>      <td>12.0</td>      <td>NaN</td>      <td>6.0</td>      <td>NaN</td>    </tr>  </tbody></table><p>3 rows × 49 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计购买点击比</span><br>data[<span class="hljs-string">&quot;um10&quot;</span>] = data[<span class="hljs-string">&quot;um8&quot;</span>]/data[<span class="hljs-string">&quot;um6&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将提取好的特征保存，待下次读取</span><br><span class="hljs-comment"># data.to_csv(&quot;./data/features.csv&quot;,index=False)</span><br></code></pre></td></tr></table></figure><h2 id="3-建模预测"><a href="#3-建模预测" class="headerlink" title="3. 建模预测"></a>3. 建模预测</h2><p>这里我们测试几种模型，并对比和观察各个模型的表现：</p><ul><li>二元逻辑回归：针对二分类问题的经典模型，训练快</li><li>随机森林：可处理高维数据、大数据集，训练快</li><li>LightGBM：内存消耗少，可直接处理缺失值，训练快</li><li>XGBoost：支持并行化，通过正则化防止过拟合，可处理缺失值，适用于中低维数据</li></ul><h3 id="3-1-建模预处理"><a href="#3-1-建模预处理" class="headerlink" title="3.1 建模预处理"></a>3.1 建模预处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># # 读取之前储存的特征</span><br><span class="hljs-comment"># data = pd.read_csv(&quot;./data/features.csv&quot;)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.info()<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 522341 entries, 0 to 522340Data columns (total 50 columns): #   Column       Non-Null Count   Dtype  ---  ------       --------------   -----   0   user_id      522341 non-null  int32   1   merchant_id  522341 non-null  int16   2   label        260864 non-null  float32 3   origin       522341 non-null  object  4   u1           522341 non-null  int64   5   u2           522341 non-null  int64   6   u3           522341 non-null  int64   7   u4           522341 non-null  int64   8   u5           522341 non-null  int64   9   u6           522341 non-null  int64   10  u7           521981 non-null  float64 11  u8           38179 non-null   float64 12  u9           522341 non-null  float64 13  u10          294859 non-null  float64 14  u11          521981 non-null  float64 15  u12          522341 non-null  float64 16  age_0.0      522341 non-null  uint8   17  age_1.0      522341 non-null  uint8   18  age_2.0      522341 non-null  uint8   19  age_3.0      522341 non-null  uint8   20  age_4.0      522341 non-null  uint8   21  age_5.0      522341 non-null  uint8   22  age_6.0      522341 non-null  uint8   23  age_7.0      522341 non-null  uint8   24  age_8.0      522341 non-null  uint8   25  gender_0.0   522341 non-null  uint8   26  gender_1.0   522341 non-null  uint8   27  gender_2.0   522341 non-null  uint8   28  m1           522341 non-null  int64   29  m2           522341 non-null  int64   30  m3           522341 non-null  int64   31  m4           522341 non-null  int64   32  m5           522341 non-null  int64   33  m6           522341 non-null  int64   34  m7           522341 non-null  float64 35  m8           518289 non-null  float64 36  m9           522341 non-null  float64 37  m10          522341 non-null  float64 38  m11          522341 non-null  float64 39  m12          522341 non-null  float64 40  um1          522341 non-null  int64   41  um2          522341 non-null  int64   42  um3          522341 non-null  int64   43  um4          522341 non-null  int64   44  um5          522341 non-null  int64   45  um6          462933 non-null  float64 46  um7          9394 non-null    float64 47  um8          522341 non-null  float64 48  um9          96551 non-null   float64 49  um10         462933 non-null  float64dtypes: float32(1), float64(17), int16(1), int32(1), int64(17), object(1), uint8(12)memory usage: 154.4+ MB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据压缩</span><br>fcols = data.select_dtypes(<span class="hljs-string">&#x27;float&#x27;</span>).columns<br>icols = data.select_dtypes(<span class="hljs-string">&#x27;integer&#x27;</span>).columns<br>data[fcols] = data[fcols].apply(pd.to_numeric, downcast=<span class="hljs-string">&#x27;float&#x27;</span>)<br>data[icols] = data[icols].apply(pd.to_numeric, downcast=<span class="hljs-string">&#x27;integer&#x27;</span>)<br><br>data.info()<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 522341 entries, 0 to 522340Data columns (total 50 columns): #   Column       Non-Null Count   Dtype  ---  ------       --------------   -----   0   user_id      522341 non-null  int32   1   merchant_id  522341 non-null  int16   2   label        260864 non-null  float32 3   origin       522341 non-null  object  4   u1           522341 non-null  int16   5   u2           522341 non-null  int16   6   u3           522341 non-null  int16   7   u4           522341 non-null  int16   8   u5           522341 non-null  int16   9   u6           522341 non-null  int16   10  u7           521981 non-null  float32 11  u8           38179 non-null   float32 12  u9           522341 non-null  float32 13  u10          294859 non-null  float32 14  u11          521981 non-null  float32 15  u12          522341 non-null  float32 16  age_0.0      522341 non-null  int8    17  age_1.0      522341 non-null  int8    18  age_2.0      522341 non-null  int8    19  age_3.0      522341 non-null  int8    20  age_4.0      522341 non-null  int8    21  age_5.0      522341 non-null  int8    22  age_6.0      522341 non-null  int8    23  age_7.0      522341 non-null  int8    24  age_8.0      522341 non-null  int8    25  gender_0.0   522341 non-null  int8    26  gender_1.0   522341 non-null  int8    27  gender_2.0   522341 non-null  int8    28  m1           522341 non-null  int32   29  m2           522341 non-null  int16   30  m3           522341 non-null  int16   31  m4           522341 non-null  int16   32  m5           522341 non-null  int32   33  m6           522341 non-null  int8    34  m7           522341 non-null  float32 35  m8           518289 non-null  float32 36  m9           522341 non-null  float32 37  m10          522341 non-null  float32 38  m11          522341 non-null  float32 39  m12          522341 non-null  float32 40  um1          522341 non-null  int16   41  um2          522341 non-null  int8    42  um3          522341 non-null  int16   43  um4          522341 non-null  int8    44  um5          522341 non-null  int8    45  um6          462933 non-null  float32 46  um7          9394 non-null    float32 47  um8          522341 non-null  float32 48  um9          96551 non-null   float32 49  um10         462933 non-null  float32dtypes: float32(18), int16(12), int32(3), int8(16), object(1)memory usage: 69.7+ MB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 部分列存在许多没有匹配的空值，将空值填充为0</span><br>data.fillna(<span class="hljs-number">0</span>, inplace = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 拆分train、test数据集</span><br>train = data[data[<span class="hljs-string">&quot;origin&quot;</span>]==<span class="hljs-string">&quot;train&quot;</span>].drop([<span class="hljs-string">&quot;origin&quot;</span>],axis = <span class="hljs-number">1</span>)<br>test = data[data[<span class="hljs-string">&quot;origin&quot;</span>]==<span class="hljs-string">&quot;test&quot;</span>].drop([<span class="hljs-string">&quot;origin&quot;</span>,<span class="hljs-string">&quot;label&quot;</span>],axis = <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X,Y = train.drop([<span class="hljs-string">&#x27;label&#x27;</span>],axis=<span class="hljs-number">1</span>),train[<span class="hljs-string">&#x27;label&#x27;</span>] <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 拆分训练集与验证集</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br>train_x,valid_x,train_y,valid_y = train_test_split(X,Y,test_size=<span class="hljs-number">0.2</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算train、valid集里正样本比例</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ratio of positive samples in train dataset:&quot;</span>,train_y.mean())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ratio of positive samples in valid dataset:&quot;</span>,valid_y.mean())<br></code></pre></td></tr></table></figure><pre><code class="hljs">Ratio of positive samples in train dataset: 0.06123886629939079Ratio of positive samples in valid dataset: 0.06079773232340813</code></pre><p>train、valid集正样本比例基本一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import libraries</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV, cross_val_score, StratifiedKFold, learning_curve<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_auc_score<br></code></pre></td></tr></table></figure><h3 id="3-2-逻辑回归"><a href="#3-2-逻辑回归" class="headerlink" title="3.2 逻辑回归"></a>3.2 逻辑回归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用默认参数建模</span><br>model = LogisticRegression()<br>model.fit(train_x,train_y)<br></code></pre></td></tr></table></figure><pre><code class="hljs">E:\Anaconda\lib\site-packages\sklearn\linear_model\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.Increase the number of iterations (max_iter) or scale the data as shown in:    https://scikit-learn.org/stable/modules/preprocessing.htmlPlease also refer to the documentation for alternative solver options:    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression  n_iter_i = _check_optimize_result(LogisticRegression()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># evaluate the model </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;accuracy：&#x27;</span>,model.score(valid_x,valid_y))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;roc_auc：&#x27;</span>,roc_auc_score(valid_y,model.predict_proba(valid_x)[:,<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><pre><code class="hljs">accuracy： 0.9392022693730474roc_auc： 0.4928235566543885</code></pre><p>使用默认参数训练出的模型基本等于无效，这里我们尝试借助 GridSearchCV函数调试参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调试参数</span><br><br>LG = LogisticRegression()<br>params = &#123;<span class="hljs-string">&quot;solver&quot;</span>:[<span class="hljs-string">&quot;liblinear&quot;</span>,<span class="hljs-string">&quot;saga&quot;</span>],  <span class="hljs-comment"># 适用于大数据集、高维度的solver</span><br>          <span class="hljs-string">&quot;C&quot;</span>:[<span class="hljs-number">0.01</span>,<span class="hljs-number">0.1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>],<br>          <span class="hljs-string">&quot;penalty&quot;</span>:[<span class="hljs-string">&quot;l1&quot;</span>,<span class="hljs-string">&quot;l2&quot;</span>]<br>         &#125;<br><br>grid_search = GridSearchCV(LG,params,cv = <span class="hljs-number">5</span>,scoring = <span class="hljs-string">&quot;roc_auc&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.fit(train_x,train_y)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调参后的最优参数结果</span><br>display(grid_search.best_params_)<br>display(grid_search.best_score_)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># evaluate the model </span><br><span class="hljs-comment"># model = grid_search.best_estimator_</span><br><br><span class="hljs-comment"># 二次计算时，可直接使用最优参数建模</span><br>LG = LogisticRegression(C = <span class="hljs-number">0.1</span>, penalty = <span class="hljs-string">&#x27;l1&#x27;</span>,solver=<span class="hljs-string">&#x27;liblinear&#x27;</span>)<br>LG.fit(train_x,train_y)<br><br><br>auc_lr = roc_auc_score(valid_y,LG.predict_proba(valid_x)[:,<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;accuracy：&#x27;</span>,LG.score(valid_x,valid_y))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;roc_auc：&#x27;</span>,auc_lr)<br></code></pre></td></tr></table></figure><pre><code class="hljs">accuracy： 0.9389339313437985roc_auc： 0.6699541453628105</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 进行预测</span><br>prob_lf = LG.predict_proba(test)[:,<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h3 id="3-3-随机森林"><a href="#3-3-随机森林" class="headerlink" title="3.3 随机森林"></a>3.3 随机森林</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用默认参数建模</span><br>model = RandomForestClassifier()<br>model.fit(train_x,train_y)<br></code></pre></td></tr></table></figure><pre><code class="hljs">RandomForestClassifier()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># evaluate model</span><br>auc_rf = roc_auc_score(valid_y,model.predict_proba(valid_x)[:,<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;accuracy：&#x27;</span>,model.score(valid_x,valid_y))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;roc_auc：&#x27;</span>,auc_rf)<br></code></pre></td></tr></table></figure><pre><code class="hljs">accuracy： 0.9390297663542445roc_auc： 0.6500745133672414</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调参</span><br>RF = RandomForestClassifier()<br>params = &#123;<span class="hljs-string">&quot;n_estimators&quot;</span>:[<span class="hljs-number">50</span>,<span class="hljs-number">100</span>],  <br>          <span class="hljs-string">&quot;max_depth&quot;</span>:[<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>],<br>          <span class="hljs-string">&quot;min_samples_split&quot;</span>:[<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">500</span>],<br>          <span class="hljs-string">&quot;min_samples_leaf&quot;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>]<br>         &#125;<br><br>grid_search = GridSearchCV(RF,params,cv = <span class="hljs-number">3</span>,scoring = <span class="hljs-string">&quot;roc_auc&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.fit(train_x,train_y)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调参后的最优参数结果</span><br>display(grid_search.best_params_)<br>display(grid_search.best_score_)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># evaluate the model </span><br><span class="hljs-comment"># model = grid_search.best_estimator_</span><br><br><span class="hljs-comment"># 二次计算时，直接使用最优参数建模</span><br>RF = RandomForestClassifier(max_depth=<span class="hljs-number">100</span>,min_samples_leaf=<span class="hljs-number">50</span>,min_samples_split=<span class="hljs-number">10</span>)<br>RF.fit(train_x,train_y)<br><br><br>auc_rf = roc_auc_score(valid_y,RF.predict_proba(valid_x)[:,<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;accuracy：&#x27;</span>,RF.score(valid_x,valid_y))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;roc_auc：&#x27;</span>,auc_rf)<br></code></pre></td></tr></table></figure><pre><code class="hljs">accuracy： 0.9392022693730474roc_auc： 0.6848666816975427</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># top10 features</span><br>features = pd.Series(RF.feature_importances_, index=train_x.columns).sort_values()<br>features[-<span class="hljs-number">9</span>:].plot.barh()<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;AxesSubplot:&gt;</code></pre><p><img src="/img/t_output_83_1.png" alt="png"></p><p>重要性排名前三的特性为：商家用户复购率，用户购买点击比和用户-商家交互过的商品数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 进行预测</span><br>prob_rf = RF.predict_proba(test)[:,<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h3 id="3-4-LightGBM"><a href="#3-4-LightGBM" class="headerlink" title="3.4 LightGBM"></a>3.4 LightGBM</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lightgbm <span class="hljs-keyword">import</span> LGBMClassifier<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用默认参数建模</span><br>model = LGBMClassifier()<br>model.fit(train_x,train_y)<br></code></pre></td></tr></table></figure><pre><code class="hljs">LGBMClassifier()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># evaluate model</span><br>auc_lgbm = roc_auc_score(valid_y,model.predict_proba(valid_x)[:,<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;accuracy：&#x27;</span>,model.score(valid_x,valid_y))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;roc_auc：&#x27;</span>,auc_lgbm)<br></code></pre></td></tr></table></figure><pre><code class="hljs">accuracy： 0.939163935368869roc_auc： 0.6842040668650429</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调参</span><br>LGBM = LGBMClassifier()<br>params = &#123;<span class="hljs-string">&quot;boosting_type&quot;</span>:[<span class="hljs-string">&quot;gbdt&quot;</span>,<span class="hljs-string">&quot;dart&quot;</span>,<span class="hljs-string">&quot;goss&quot;</span>],<br>          <span class="hljs-string">&quot;learning_rate&quot;</span>:[<span class="hljs-number">0.05</span>,<span class="hljs-number">0.1</span>],<br>          <span class="hljs-string">&quot;n_estimators&quot;</span>:[<span class="hljs-number">100</span>,<span class="hljs-number">1000</span>],<br>          <span class="hljs-string">&quot;num_leaves&quot;</span>:[<span class="hljs-number">30</span>,<span class="hljs-number">100</span>,<span class="hljs-number">500</span>],<br>          <span class="hljs-string">&quot;max_depth&quot;</span>:[<span class="hljs-number">10</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>],<br>          <span class="hljs-string">&quot;subsample&quot;</span>:[<span class="hljs-number">0.5</span>],<br>          <span class="hljs-string">&quot;min_split_gain&quot;</span>:[<span class="hljs-number">0.05</span>]<br>         &#125;<br><br>grid_search = GridSearchCV(LGBM,params,cv = <span class="hljs-number">3</span>,scoring = <span class="hljs-string">&quot;roc_auc&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.fit(train_x,train_y)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调参后的最优参数结果</span><br>display(grid_search.best_params_)<br>display(grid_search.best_score_)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># evaluate the model </span><br><span class="hljs-comment"># model = grid_search.best_estimator_</span><br><br><span class="hljs-comment"># 二次计算时，直接使用最优参数建模</span><br>LGBM = LGBMClassifier(<br>    boosting_type=<span class="hljs-string">&quot;dart&quot;</span>,<br>    learning_rate=<span class="hljs-number">0.05</span>,<br>    max_depth = <span class="hljs-number">10</span>,<br>    min_split_gain = <span class="hljs-number">0.05</span>,<br>    n_estimators = <span class="hljs-number">1000</span>,<br>    num_leaves = <span class="hljs-number">30</span>,<br>    subsample = <span class="hljs-number">0.5</span><br>    )<br>LGBM.fit(train_x,train_y)<br><br><br>auc_lgbm = roc_auc_score(valid_y,LGBM.predict_proba(valid_x)[:,<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;accuracy：&#x27;</span>,LGBM.score(valid_x,valid_y))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;roc_auc：&#x27;</span>,auc_lgbm)<br></code></pre></td></tr></table></figure><pre><code class="hljs">accuracy： 0.939163935368869roc_auc： 0.687943355403638</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># top10 features</span><br><span class="hljs-keyword">import</span> lightgbm<br>lightgbm.plot_importance(LGBM,max_num_features=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;Feature importance&#39;&#125;, xlabel=&#39;Feature importance&#39;, ylabel=&#39;Features&#39;&gt;</code></pre><p><img src="/img/t_output_94_1.png" alt="png"></p><p>重要性排名前三的特性为：商家用户复购率，用户购买点击比和商家被交互过的品类数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 进行预测</span><br>prob_lgbm = LGBM.predict_proba(test)[:,<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h3 id="3-5-XGBoost"><a href="#3-5-XGBoost" class="headerlink" title="3.5 XGBoost"></a>3.5 XGBoost</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> xgboost <span class="hljs-keyword">import</span> XGBClassifier<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用默认参数建模</span><br>model = XGBClassifier()<br>model.fit(train_x,train_y)<br></code></pre></td></tr></table></figure><pre><code class="hljs">XGBClassifier(base_score=0.5, booster=&#39;gbtree&#39;, callbacks=None,              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,              early_stopping_rounds=None, enable_categorical=False,              eval_metric=None, gamma=0, gpu_id=-1, grow_policy=&#39;depthwise&#39;,              importance_type=None, interaction_constraints=&#39;&#39;,              learning_rate=0.300000012, max_bin=256, max_cat_to_onehot=4,              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,              missing=nan, monotone_constraints=&#39;()&#39;, n_estimators=100,              n_jobs=0, num_parallel_tree=1, predictor=&#39;auto&#39;, random_state=0,              reg_alpha=0, reg_lambda=1, ...)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># evaluate model</span><br>auc_xgb = roc_auc_score(valid_y,model.predict_proba(valid_x)[:,<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;accuracy：&#x27;</span>,model.score(valid_x,valid_y))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;roc_auc：&#x27;</span>,auc_xgb)<br></code></pre></td></tr></table></figure><pre><code class="hljs">accuracy： 0.9386847603166388roc_auc： 0.6774144828554727</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调参</span><br>XGB = XGBClassifier()<br>params = &#123;<span class="hljs-string">&quot;eta&quot;</span>:[<span class="hljs-number">0.05</span>,<span class="hljs-number">0.1</span>],<br>          <span class="hljs-string">&quot;gamma&quot;</span>:[<span class="hljs-number">5</span>,<span class="hljs-number">50</span>,<span class="hljs-number">200</span>],<br>          <span class="hljs-string">&quot;min_child_weight&quot;</span>:[<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1000</span>],<br>          <span class="hljs-string">&quot;max_depth&quot;</span>:[<span class="hljs-number">5</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>],<br>          <span class="hljs-string">&quot;subsample&quot;</span>:[<span class="hljs-number">0.5</span>],<br>          <span class="hljs-string">&quot;objective&quot;</span>:[<span class="hljs-string">&quot;binary:logistic&quot;</span>],<br>          <span class="hljs-string">&quot;eval_metric&quot;</span>:[<span class="hljs-string">&quot;auc&quot;</span>]<br>         &#125;<br><br>grid_search = GridSearchCV(XGB,params,cv = <span class="hljs-number">3</span>,scoring = <span class="hljs-string">&quot;roc_auc&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">grid_search.fit(train_x,train_y)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调参后的最优参数结果</span><br>display(grid_search.best_params_)<br>display(grid_search.best_score_)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># evaluate the model </span><br><span class="hljs-comment"># model = grid_search.best_estimator_</span><br><br><span class="hljs-comment"># 二次计算时，直接使用最优参数建模</span><br>XGB = XGBClassifier(<br>    eta=<span class="hljs-number">0.1</span>,<br>    gamma=<span class="hljs-number">5</span>,<br>    max_depth = <span class="hljs-number">50</span>,<br>    min_child_weight = <span class="hljs-number">100</span>,<br>    objective = <span class="hljs-string">&quot;binary:logistic&quot;</span>,<br>    eval_metric = <span class="hljs-string">&quot;auc&quot;</span>,<br>    subsample = <span class="hljs-number">0.5</span><br>    )<br>XGB.fit(train_x,train_y)<br><br><br>auc_xgb = roc_auc_score(valid_y,XGB.predict_proba(valid_x)[:,<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;accuracy：&#x27;</span>,XGB.score(valid_x,valid_y))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;roc_auc：&#x27;</span>,auc_xgb)<br></code></pre></td></tr></table></figure><pre><code class="hljs">accuracy： 0.9392022693730474roc_auc： 0.6886825861417296</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># top10 features</span><br><span class="hljs-keyword">import</span> xgboost<br>xgboost.plot_importance(XGB,max_num_features=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;Feature importance&#39;&#125;, xlabel=&#39;F score&#39;, ylabel=&#39;Features&#39;&gt;</code></pre><p><img src="/img/t_output_105_1.png" alt="png"></p><p>重要性排名前三的特性为：商家用户复购率，用户购买点击比和商家购买点击比。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 进行预测</span><br>prob_xgb = XGB.predict_proba(test)[:,<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h3 id="3-6-基模型结果分析"><a href="#3-6-基模型结果分析" class="headerlink" title="3.6 基模型结果分析"></a>3.6 基模型结果分析</h3><p>比较各模型结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 汇总各模型分数</span><br>scores = pd.DataFrame(&#123;<span class="hljs-string">&quot;auc&quot;</span>:[auc_lr,auc_rf,auc_lgbm,auc_xgb],<br>                      <span class="hljs-string">&quot;model&quot;</span>:[<span class="hljs-string">&quot;LogisticRegression&quot;</span>,<span class="hljs-string">&quot;RandomForest&quot;</span>,<span class="hljs-string">&quot;LightGBM&quot;</span>,<span class="hljs-string">&quot;XGBoost&quot;</span>]&#125;)<br>scores.sort_values(by=<span class="hljs-string">&quot;auc&quot;</span>,ascending=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>auc</th>      <th>model</th>    </tr>  </thead>  <tbody>    <tr>      <th>3</th>      <td>0.688683</td>      <td>XGBoost</td>    </tr>    <tr>      <th>2</th>      <td>0.687943</td>      <td>LightGBM</td>    </tr>    <tr>      <th>1</th>      <td>0.684867</td>      <td>RandomForest</td>    </tr>    <tr>      <th>0</th>      <td>0.669954</td>      <td>LogisticRegression</td>    </tr>  </tbody></table></div><p>比较各模型auc分数，LightGBM预测模型的表现最好，其auc分数为0.6885。而在针对各模型的特征重要性的排序中，用户的购买点击比、商家的用户复购率这两个特性在各模型中都排在前列，对模型的影响最大。 </p><p>我们试着绘制训练和验证过程的学习曲线，对各个单模型是否存在过拟合或者欠拟合等情况进行探究。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用sklearn的learning_curve得到training_score和cv_score，使用matplotlib画出learning curve</span><br><br>clfs = [LG,RF,LGBM,XGB]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_learning_curve</span>(<span class="hljs-params">clf, title, X, y, ylim=<span class="hljs-literal">None</span>, cv=<span class="hljs-literal">None</span>, n_jobs=<span class="hljs-number">3</span>, train_sizes=np.linspace(<span class="hljs-params"><span class="hljs-number">.05</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">5</span></span>)</span>):</span><br>    train_sizes, train_scores, test_scores = learning_curve(<br>        clf, X, y, train_sizes=train_sizes)<br>    train_scores_mean = np.mean(train_scores, axis=<span class="hljs-number">1</span>)<br>    train_scores_std = np.std(train_scores, axis=<span class="hljs-number">1</span>)<br>    test_scores_mean = np.mean(test_scores, axis=<span class="hljs-number">1</span>)<br>    test_scores_std = np.std(test_scores, axis=<span class="hljs-number">1</span>)<br>    <br>    ax = plt.figure().add_subplot(<span class="hljs-number">111</span>)<br>    ax.set_title(title)<br>    <span class="hljs-keyword">if</span> ylim <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        ax.ylim(*ylim)<br>    ax.set_xlabel(<span class="hljs-string">u&quot;train_num_of_samples&quot;</span>)<br>    ax.set_ylabel(<span class="hljs-string">u&quot;score&quot;</span>)<br><br>    ax.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, <br>                     alpha=<span class="hljs-number">0.1</span>, color=<span class="hljs-string">&quot;b&quot;</span>)<br>    ax.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, <br>                     alpha=<span class="hljs-number">0.1</span>, color=<span class="hljs-string">&quot;r&quot;</span>)<br>    ax.plot(train_sizes, train_scores_mean, <span class="hljs-string">&#x27;o-&#x27;</span>, color=<span class="hljs-string">&quot;b&quot;</span>, label=<span class="hljs-string">u&quot;train score&quot;</span>)<br>    ax.plot(train_sizes, test_scores_mean, <span class="hljs-string">&#x27;o-&#x27;</span>, color=<span class="hljs-string">&quot;r&quot;</span>, label=<span class="hljs-string">u&quot;testCV score&quot;</span>)<br><br>    ax.legend(loc=<span class="hljs-string">&quot;best&quot;</span>)<br><br>    midpoint = ((train_scores_mean[-<span class="hljs-number">1</span>] + train_scores_std[-<span class="hljs-number">1</span>]) + (test_scores_mean[-<span class="hljs-number">1</span>] - test_scores_std[-<span class="hljs-number">1</span>])) / <span class="hljs-number">2</span><br>    diff = (train_scores_mean[-<span class="hljs-number">1</span>] + train_scores_std[-<span class="hljs-number">1</span>]) - (test_scores_mean[-<span class="hljs-number">1</span>] - test_scores_std[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> midpoint, diff<br><br>alg_list=[<span class="hljs-string">&#x27;logreg&#x27;</span>, <span class="hljs-string">&#x27;randomforest&#x27;</span>, <span class="hljs-string">&#x27;lightGBM&#x27;</span>, <span class="hljs-string">&#x27;XGBoost&#x27;</span>]<br><br>plot_learning_curve(clfs[<span class="hljs-number">0</span>], alg_list[<span class="hljs-number">0</span>], X, Y)<br>plot_learning_curve(clfs[<span class="hljs-number">1</span>], alg_list[<span class="hljs-number">1</span>], X, Y)<br>plot_learning_curve(clfs[<span class="hljs-number">2</span>], alg_list[<span class="hljs-number">2</span>], X, Y)<br>plot_learning_curve(clfs[<span class="hljs-number">3</span>], alg_list[<span class="hljs-number">3</span>], X, Y)<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">(0.9388542876912196, 2.403725037580795e-05)</code></pre><p><img src="/img/t_output_112_1.png" alt="png"></p><p><img src="/img/t_output_112_2.png" alt="png"></p><p><img src="/img/t_output_112_3.png" alt="png"></p><p><img src="/img/t_output_112_4.png" alt="png"></p><h4 id="K-折交叉验证-Accuracy"><a href="#K-折交叉验证-Accuracy" class="headerlink" title="K-折交叉验证(Accuracy)"></a>K-折交叉验证(Accuracy)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 10-折交叉验证，计算准确率 Accuracy</span><br><br>kfold = <span class="hljs-number">10</span><br>cv_results = []<br><span class="hljs-keyword">for</span> classifier <span class="hljs-keyword">in</span> clfs :<br>    cv_results.append(cross_val_score(classifier, X.values, y = Y.values, scoring = <span class="hljs-string">&quot;accuracy&quot;</span>, cv = kfold, n_jobs=<span class="hljs-number">4</span>))<br><br><span class="hljs-comment"># cv_results 为8*10的结果矩阵</span><br>cv_means = []<br>cv_std = []<br><span class="hljs-keyword">for</span> cv_result <span class="hljs-keyword">in</span> cv_results:<br>    cv_means.append(cv_result.mean())<br>    cv_std.append(cv_result.std())<br><br>ag = [<span class="hljs-string">&#x27;logreg&#x27;</span>, <span class="hljs-string">&#x27;randomforest&#x27;</span>, <span class="hljs-string">&#x27;lightGBM&#x27;</span>, <span class="hljs-string">&#x27;XGBoost&#x27;</span>]<br>cv_res = pd.DataFrame(&#123;<span class="hljs-string">&quot;CrossValMeans&quot;</span>:cv_means,<span class="hljs-string">&quot;CrossValerrors&quot;</span>: cv_std,<br>                       <span class="hljs-string">&quot;Algorithm&quot;</span>:ag&#125;)<br><br>g = sns.barplot(<span class="hljs-string">&quot;CrossValMeans&quot;</span>,<span class="hljs-string">&quot;Algorithm&quot;</span>,data = cv_res, palette=<span class="hljs-string">&quot;Blues&quot;</span>)<br>g.set_xlabel(<span class="hljs-string">&quot;CrossValMeans&quot;</span>,fontsize=<span class="hljs-number">10</span>)<br>g.set_ylabel(<span class="hljs-string">&#x27;&#x27;</span>)<br>plt.xticks(rotation=<span class="hljs-number">30</span>)<br>g = g.set_title(<span class="hljs-string">&quot;10-fold Cross validation scores&quot;</span>,fontsize=<span class="hljs-number">12</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">E:\Anaconda\lib\site-packages\seaborn\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.  warnings.warn(</code></pre><p><img src="/img/t_output_114_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 展示10-fold Cross validation的均值得分结果</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; : &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ag[i],cv_means[i]))<br></code></pre></td></tr></table></figure><pre><code class="hljs">logreg : 0.9386500242771005randomforest : 0.9388493622744981lightGBM : 0.9388455288006042XGBoost : 0.9388608622553315</code></pre><h2 id="4-Bagging"><a href="#4-Bagging" class="headerlink" title="4. Bagging"></a>4. Bagging</h2><p>比较各模型auc分数，XGBoost和LightGBM预测模型的表现已经很不错。在许多分类问题上集成学习可以带来一下几种可能的好处：</p><ul><li>提高模型整体的泛化能力</li><li>降低陷入局部极小的风险</li><li>提升模型预测的稳定性</li></ul><p>因此，我们将四种基模型进行Bagging集成，并测试其性能表现</p><h3 id="4-1-集成模型的建立"><a href="#4-1-集成模型的建立" class="headerlink" title="4.1 集成模型的建立"></a>4.1 集成模型的建立</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#from sklearn.metrics import precision_score</span><br><br><span class="hljs-comment"># 定义集成框架</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bagging</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-comment"># sklearn机器学习算法的实现都属于estimators的子类：</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,estimators</span>):</span><br>        self.estimator_names = []<br>        self.estimators = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> estimators:<br>            self.estimator_names.append(i[<span class="hljs-number">0</span>])<br>            self.estimators.append(i[<span class="hljs-number">1</span>])<br>        self.clf = LogisticRegression()<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span>(<span class="hljs-params">self, train_x, train_y</span>):</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.estimators:<br>            i.fit(train_x,train_y)<br>        x = np.array([i.predict(train_x) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.estimators]).T<br>        y = train_y<br>        self.clf.fit(x, y)<br>        <br><span class="hljs-comment">#     0-1分类问题   </span><br><span class="hljs-comment">#     def predict(self,x):</span><br><span class="hljs-comment">#         x = np.array([i.predict(x) for i in self.estimators]).T</span><br><span class="hljs-comment">#         #print(x)</span><br><span class="hljs-comment">#         return self.clf.predict(x)</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">predict_proba</span>(<span class="hljs-params">self,x</span>):</span><br>        x = np.array([i.predict_proba(x)[:,<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.estimators]).T<br>        <span class="hljs-comment">#print(x)</span><br>        <span class="hljs-keyword">return</span> self.clf.predict_proba(x)[:,<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">score</span>(<span class="hljs-params">self,x,y</span>):</span><br><span class="hljs-comment">#       s_acc = precision_score(y,self.predict(x))</span><br>        s_auc = roc_auc_score(y,self.predict_proba(x))<br>        <span class="hljs-comment">#print(s)</span><br>        <span class="hljs-keyword">return</span> s_auc<br></code></pre></td></tr></table></figure><p>选择模型进行 Bagging </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">bag = Bagging([(<span class="hljs-string">&#x27;logreg&#x27;</span>,LG),(<span class="hljs-string">&#x27;RandomForests&#x27;</span>,RF),(<span class="hljs-string">&#x27;LightGBM&#x27;</span>,LGBM),(<span class="hljs-string">&#x27;XGBoost&#x27;</span>,XGB)])<br></code></pre></td></tr></table></figure><h3 id="4-2-测试模型表现"><a href="#4-2-测试模型表现" class="headerlink" title="4.2 测试模型表现"></a>4.2 测试模型表现</h3><p>同样基于roc_auc_score，这里我们进行10轮，最终取平均成绩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">score = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>    num_test = <span class="hljs-number">0.20</span><br><span class="hljs-comment">#   X_train, X_cv, Y_train, Y_cv = train_test_split(X_all.values, Y_all.values, test_size=num_test)</span><br>    X_train, X_cv, Y_train, Y_cv = train_x,valid_x,train_y,valid_y<br>    bag.fit(X_train, Y_train)<br>    <span class="hljs-comment">#Y_test = bag.predict(X_test)</span><br><span class="hljs-comment">#   auc_ = round(bag.score(X_cv, Y_cv) * 100, 2)</span><br>    auc_ = bag.score(X_cv, Y_cv)<br>    score+=auc_<br>score/<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">0.6899103572351627</code></pre><p>与单个学习器中表现最好的XGBoost模型相比（roc_auc_score=0.688683），Bagging模型的表现还是有明显的提升。</p><h3 id="4-3-进行预测"><a href="#4-3-进行预测" class="headerlink" title="4.3 进行预测"></a>4.3 进行预测</h3><p>为使模型更充分地学习已有训练数据，接下来使用全部的已知标签数据训练模型，然后使用该集成模型对未知数据进行预测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用Bagging模型进行训练和预测</span><br>bag.fit(X.values, Y.values)<br>prob_bagging = bag.predict_proba(test)<br><br><span class="hljs-comment"># 保存集成模型预测结果，存在submission.csv文件中</span><br>submission = pd.DataFrame()<br>submission[[<span class="hljs-string">&#x27;user_id&#x27;</span>,<span class="hljs-string">&#x27;merchant_id&#x27;</span>]] = test[[<span class="hljs-string">&#x27;user_id&#x27;</span>,<span class="hljs-string">&#x27;merchant_id&#x27;</span>]]<br>submission[<span class="hljs-string">&#x27;prob&#x27;</span>] = prob_bagging<br>submission.to_csv(<span class="hljs-string">&#x27;./data/submission.csv&#x27;</span>,index=<span class="hljs-literal">False</span>) <br></code></pre></td></tr></table></figure><h2 id="参考声明"><a href="#参考声明" class="headerlink" title="参考声明"></a>参考声明</h2><p>本报告的实现参考了以下内容：</p><ul><li><a href="https://www.kdd.org/kdd2016/papers/files/adf0160-liuA.pdf">Repeat Buyer Prediction for E-Commerce</a></li><li><a href="https://ieeexplore.ieee.org/abstract/document/8955625">Loyal Consumers or One-time Deal Hunters:<br>Repeat Buyer Prediction for E-commerce</a></li><li><a href="https://www.heywhale.com/mw/project/6044a21f6b48c2001529f1b5/content">用户复购预测</a></li><li><a href="https://www.analyticsvidhya.com/blog/2020/03/beginners-guide-random-forest-hyperparameter-tuning/">A Beginner’s Guide to Random Forest Hyperparameter Tuning</a></li><li><a href="https://lightgbm.readthedocs.io/en/latest/Parameters-Tuning.html">LightGBM Parameters Tuning Document</a></li><li><a href="https://www.heywhale.com/mw/project/622da28b8a84f900178991c7">天猫用户复购</a></li><li><a href="https://zhuanlan.zhihu.com/p/28795160">分分钟，杀入Kaggle TOP 5% 系列（2）</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !jupyter nbconvert RepeatPurchaseForecast.ipynb --to html</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
      <category>天池</category>
      
      <category>集成学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>集成学习</tag>
      
      <tag>ML</tag>
      
      <tag>天池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kaggle Titanic问题(集成学习)</title>
    <link href="/2022/11/03/kaggle%20Titanic%E9%97%AE%E9%A2%98(%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0)/"/>
    <url>/2022/11/03/kaggle%20Titanic%E9%97%AE%E9%A2%98(%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0)/</url>
    
    <content type="html"><![CDATA[<h1 id="Titanic-生存率预测"><a href="#Titanic-生存率预测" class="headerlink" title="Titanic 生存率预测"></a>Titanic 生存率预测</h1><h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p>泰坦尼克号（Titanic）问题的背景就是那个大家都熟悉的『Jack and Rose』的故事，豪华游艇倒了，大家都惊恐逃生，可是救生艇的数量有限，无法人人都有，副船长发话了『lady and kid first！』，所以是否获救其实并非随机，而是基于一些背景而有rank先后的。训练和测试数据是一些乘客的个人信息以及存活状况，要尝试根据它生成合适的模型并预测其他人（test.data中的新数据）的存活状况，模型最终结果保存在predictedData.csv中。</p><p>显然，这是一个二分类问题，我们学习使用集成学习方法进行建模求解。<br>数据集下载地址：kaggle官网 <a href="https://www.kaggle.com/competitions/titanic/data">https://www.kaggle.com/competitions/titanic/data</a></p><h3 id="开始加油！"><a href="#开始加油！" class="headerlink" title="开始加油！"></a>开始加油！</h3><p>(ง •̀_•́)ง (*•̀ㅂ•́)و</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数据处理</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-comment">#import os</span><br><span class="hljs-comment">#绘图</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>%matplotlib inline<br><span class="hljs-comment"># matplotlib支持中文</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]  <span class="hljs-comment"># 用来正常显示中文标签</span><br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 用来正常显示负号</span><br><br><span class="hljs-comment">#各种模型、数据处理方法</span><br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> LabelEncoder <span class="hljs-comment"># 对数据进行编码</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split <br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC, LinearSVC <span class="hljs-comment">#支持向量机用于分类</span><br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br><span class="hljs-keyword">from</span> sklearn.naive_bayes <span class="hljs-keyword">import</span> GaussianNB<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> Perceptron <span class="hljs-comment">#感知机</span><br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> SGDClassifier <span class="hljs-comment">#随机梯度下降分类</span><br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> GradientBoostingClassifier<br><span class="hljs-keyword">from</span> xgboost <span class="hljs-keyword">import</span> XGBClassifier <br><span class="hljs-keyword">from</span> lightgbm <span class="hljs-keyword">import</span> LGBMClassifier<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV, cross_val_score, StratifiedKFold, learning_curve<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_score <span class="hljs-comment"># 精度是比率tp /（tp + fp）</span><br><br><span class="hljs-keyword">import</span> warnings<br>warnings.filterwarnings(<span class="hljs-string">&#x27;ignore&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="二、数据读取和查看"><a href="#二、数据读取和查看" class="headerlink" title="二、数据读取和查看"></a>二、数据读取和查看</h3><p>首先读入数据，并且初步查看数据的记录数，字段数据类型，缺失等信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读入数据</span><br>train_df = pd.read_csv(<span class="hljs-string">&#x27;data/train.csv&#x27;</span>)<br>test_df = pd.read_csv(<span class="hljs-string">&#x27;data/test.csv&#x27;</span>)<br>combine_df = pd.concat([train_df, test_df])<br><span class="hljs-comment"># concat默认拼接方式是上下堆叠</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看数据，展示前5行</span><br>train_df.head()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看数据类型等信息</span><br>train_df.info()<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns): #   Column       Non-Null Count  Dtype  ---  ------       --------------  -----   0   PassengerId  891 non-null    int64   1   Survived     891 non-null    int64   2   Pclass       891 non-null    int64   3   Name         891 non-null    object  4   Sex          891 non-null    object  5   Age          714 non-null    float64 6   SibSp        891 non-null    int64   7   Parch        891 non-null    int64   8   Ticket       891 non-null    object  9   Fare         891 non-null    float64 10  Cabin        204 non-null    object  11  Embarked     889 non-null    object dtypes: float64(2), int64(5), object(5)memory usage: 83.7+ KB</code></pre><p>我们可以看到部分数据存在缺失，数据类型多样，后续需要进行相关的数据处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_df.describe()<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>714.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>    </tr>    <tr>      <th>mean</th>      <td>446.000000</td>      <td>0.383838</td>      <td>2.308642</td>      <td>29.699118</td>      <td>0.523008</td>      <td>0.381594</td>      <td>32.204208</td>    </tr>    <tr>      <th>std</th>      <td>257.353842</td>      <td>0.486592</td>      <td>0.836071</td>      <td>14.526497</td>      <td>1.102743</td>      <td>0.806057</td>      <td>49.693429</td>    </tr>    <tr>      <th>min</th>      <td>1.000000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.420000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>223.500000</td>      <td>0.000000</td>      <td>2.000000</td>      <td>20.125000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>7.910400</td>    </tr>    <tr>      <th>50%</th>      <td>446.000000</td>      <td>0.000000</td>      <td>3.000000</td>      <td>28.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>14.454200</td>    </tr>    <tr>      <th>75%</th>      <td>668.500000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>38.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>31.000000</td>    </tr>    <tr>      <th>max</th>      <td>891.000000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>80.000000</td>      <td>8.000000</td>      <td>6.000000</td>      <td>512.329200</td>    </tr>  </tbody></table></div><p>以上包含数值型数据（Numerical data）的统计特征</p><h3 id="三、数据探索与变量分析"><a href="#三、数据探索与变量分析" class="headerlink" title="三、数据探索与变量分析"></a>三、数据探索与变量分析</h3><p>首先通过pandas的corr()函数计算相关系数矩阵，初步探索各个字段与预测变量“Survived”的关系以及各个变量之间的关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过相关系数矩阵初步观察特征与“Survived&quot;的关系</span><br><br>train_df_corr = train_df.drop(<span class="hljs-string">&#x27;PassengerId&#x27;</span>,axis=<span class="hljs-number">1</span>).corr()<br><br>f, ax = plt.subplots(figsize=(<span class="hljs-number">9</span>,<span class="hljs-number">6</span>))<br>plt.style.use(<span class="hljs-string">&#x27;ggplot&#x27;</span>)<br>sns.set_style(<span class="hljs-string">&#x27;darkgrid&#x27;</span>)<br>sns.<span class="hljs-built_in">set</span>(context=<span class="hljs-string">&quot;paper&quot;</span>, font=<span class="hljs-string">&quot;monospace&quot;</span>)<br><br>hm = sns.heatmap(train_df_corr, cmap=sns.diverging_palette(<span class="hljs-number">20</span>, <span class="hljs-number">220</span>, n=<span class="hljs-number">200</span>),cbar=<span class="hljs-literal">True</span>, annot=<span class="hljs-literal">True</span>, square=<span class="hljs-literal">True</span>, fmt=<span class="hljs-string">&#x27;.3f&#x27;</span>,<br>                 annot_kws=&#123;<span class="hljs-string">&#x27;size&#x27;</span>:<span class="hljs-number">12</span>&#125;)<span class="hljs-comment"># 使用了seaborn的diverging_palette调色</span><br>ax.set_xticklabels(train_df_corr.index, size=<span class="hljs-number">11</span>)<br>ax.set_yticklabels(train_df_corr.columns[:], size=<span class="hljs-number">11</span>)<br>ax.set_title(<span class="hljs-string">&#x27;train feature corr&#x27;</span>, fontsize=<span class="hljs-number">15</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Text(0.5, 1.0, &#39;train feature corr&#39;)</code></pre><p><img src="/img/output_11_1.png"><br>​    </p><p>根据相关系数矩阵，我们初步分析可知：</p><ol><li>Fare（乘客费用）、Parch（同行的家长和孩子数目）与“Survived”正相关。<br>数据显示高费用顾客更可能获救；</li><li>SibSp（同行的兄弟姐妹和配偶数目）、Age（年龄）、Pclass（用户阶级）与<br>“Survived”负相关；其中Pclass的值越小用户所属的等级越高，表示等级高的乘客更可能获救，这是具有一定的合理性的。<br>……</li></ol><h3 id="四、特征探索"><a href="#四、特征探索" class="headerlink" title="四、特征探索"></a>四、特征探索</h3><h4 id="4-1-年龄（Name）"><a href="#4-1-年龄（Name）" class="headerlink" title="4.1 年龄（Name）"></a>4.1 年龄（Name）</h4><p>我们将可视化展示训练数据集中年龄的整体分布以及dead和alive乘客的数量分布统计。并进行对比分析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br>fig, axes = plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">6</span>))<br>sns.distplot(train_df.Age.dropna(), rug=<span class="hljs-literal">True</span>, color=<span class="hljs-string">&#x27;b&#x27;</span>, ax=axes[<span class="hljs-number">0</span>])<br>ax0 = axes[<span class="hljs-number">0</span>]<br>ax0.tick_params(labelsize=<span class="hljs-number">10</span>)<br>ax0.set_title(<span class="hljs-string">&#x27;age distribution&#x27;</span>,fontsize=<span class="hljs-number">12</span>)<br>ax0.set_xlabel(<span class="hljs-string">&#x27;&#x27;</span>)<br>ax0.set_ylabel(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>ax1 = axes[<span class="hljs-number">1</span>]<br><span class="hljs-comment"># ax1.set_title(&#x27;age survived distribution&#x27;)</span><br>k1 = sns.distplot(train_df[train_df.Survived==<span class="hljs-number">0</span>].Age.dropna(), hist=<span class="hljs-literal">False</span>, color=<span class="hljs-string">&#x27;y&#x27;</span>, ax=ax1, label=<span class="hljs-string">&#x27;dead&#x27;</span>)<br>k2 = sns.distplot(train_df[train_df.Survived==<span class="hljs-number">1</span>].Age.dropna(), hist=<span class="hljs-literal">False</span>, color=<span class="hljs-string">&#x27;b&#x27;</span>, ax=ax1, label=<span class="hljs-string">&#x27;alive&#x27;</span>)<br>ax1.tick_params(labelsize=<span class="hljs-number">10</span>)<br>ax1.set_xlabel(<span class="hljs-string">&#x27;age survived distribution&#x27;</span>,fontsize=<span class="hljs-number">12</span>)<br>ax1.set_ylabel(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>ax1.legend(fontsize=<span class="hljs-number">12</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;matplotlib.legend.Legend at 0x24b9bfaffd0&gt;</code></pre><p><img src="/img/output_14_1.png"></p><p>乘客的年龄集中在20-40岁，所以主要为青年人和中年人。从age survived distribution表中我们可以发现，小孩获救似乎更容易一些，这个结果也有一定的社会基础，灾难时刻，大多数人可能选择站出来保护妇女和儿童。</p><h4 id="4-2-用户阶级（Pclass）"><a href="#4-2-用户阶级（Pclass）" class="headerlink" title="4.2 用户阶级（Pclass）"></a>4.2 用户阶级（Pclass）</h4><p>我们绘制柱形图展示不同Pclass（1， 2 ， 3）的乘客获救与未获救的数量，以对比发现Pclass与“Survived”的关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">y_dead = train_df[train_df.Survived==<span class="hljs-number">0</span>].groupby(<span class="hljs-string">&#x27;Pclass&#x27;</span>)[<span class="hljs-string">&#x27;Survived&#x27;</span>].count()<br>y_alive = train_df[train_df.Survived==<span class="hljs-number">1</span>].groupby(<span class="hljs-string">&#x27;Pclass&#x27;</span>)[<span class="hljs-string">&#x27;Survived&#x27;</span>].count()<br><br>pos = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>ax = plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">4</span>)).add_subplot(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>ax.bar(pos, y_dead, color=<span class="hljs-string">&#x27;r&#x27;</span>, alpha=<span class="hljs-number">0.5</span>, label=<span class="hljs-string">&#x27;dead&#x27;</span>)<br>ax.bar(pos, y_alive, color=<span class="hljs-string">&#x27;b&#x27;</span>, bottom=y_dead, alpha=<span class="hljs-number">0.5</span>, label=<span class="hljs-string">&#x27;alive&#x27;</span>)<br>ax.legend(fontsize=<span class="hljs-number">15</span>, loc=<span class="hljs-string">&#x27;best&#x27;</span>)<br>ax.set_xticks(pos)<br>ax.set_xticklabels([<span class="hljs-string">&#x27;Pclass %d&#x27;</span>%(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)], size=<span class="hljs-number">12</span>)<br>ax.set_title(<span class="hljs-string">&#x27;Pclass Surveved count&#x27;</span>, size=<span class="hljs-number">15</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Text(0.5, 1.0, &#39;Pclass Surveved count&#39;)</code></pre><p><img src="/img/output_17_1.png"></p><p>Pclass从1至3等级递减，即1可以理解为头等乘客。我们发现在Pclass=1的记录中，乘客的获救比例明显最高，这是一个有趣的现象。或许更高等的乘客配备了更好的保护措施。</p><h4 id="4-3-性别（Sex）"><a href="#4-3-性别（Sex）" class="headerlink" title="4.3 性别（Sex）"></a>4.3 性别（Sex）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计性别和获救的数量</span><br><br><span class="hljs-built_in">print</span>(train_df.Sex.value_counts())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------------------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(train_df.groupby(<span class="hljs-string">&#x27;Sex&#x27;</span>)[<span class="hljs-string">&#x27;Survived&#x27;</span>].mean())<br></code></pre></td></tr></table></figure><pre><code class="hljs">male      577female    314Name: Sex, dtype: int64-------------------------------Sexfemale    0.742038male      0.188908Name: Survived, dtype: float64</code></pre><p>我们注意到，男性的数量偏多，同时数据展现出来的女性的存活率（0.742038）远远高于男性（0.188908）<br>这符合我们在年龄（Name）中的有关猜想。我们在后续的特征处理中应该注意这一特点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># violinplot(小提琴图)可视化展示</span><br><br>ax = plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">5</span>)).add_subplot(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>sns.violinplot(x=<span class="hljs-string">&#x27;Sex&#x27;</span>, y=<span class="hljs-string">&#x27;Age&#x27;</span>, hue=<span class="hljs-string">&#x27;Survived&#x27;</span>, palette=<span class="hljs-string">&quot;Set2&quot;</span>, data=train_df.dropna(), split=<span class="hljs-literal">True</span>)<br>ax.set_xlabel(<span class="hljs-string">&#x27;Sex&#x27;</span>, size=<span class="hljs-number">13</span>)<br>ax.set_xticklabels([<span class="hljs-string">&#x27;Female&#x27;</span>, <span class="hljs-string">&#x27;male&#x27;</span>], size=<span class="hljs-number">12</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;Age&#x27;</span>, size=<span class="hljs-number">13</span>)<br>ax.legend(fontsize=<span class="hljs-number">12</span>,loc=<span class="hljs-string">&#x27;best&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;matplotlib.legend.Legend at 0x24b9e256f40&gt;</code></pre><p><img src="/img/output_22_1.png"></p><p>图例中0表示’Survived’=0，即未获救；图表具有多个维度，可以反映不同性别以及是否获救的乘客的大致分布情况。<br>分析结果显示，无论男女中青年容易获救；相比于女性，男性老年和小孩的获救比例更大。</p><h4 id="4-4-Frae-票价"><a href="#4-4-Frae-票价" class="headerlink" title="4.4 Frae(票价)"></a>4.4 Frae(票价)</h4><p>我们分别绘制票价的总体分布图和dead和alive类型的票价分布对比图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 票价的总体分布图</span><br>fig = plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>))<br>ax = plt.subplot2grid((<span class="hljs-number">2</span>,<span class="hljs-number">2</span>), (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>), colspan=<span class="hljs-number">2</span>)<br><br>ax.tick_params(labelsize=<span class="hljs-number">10</span>)<br>ax.set_title(<span class="hljs-string">&#x27;Fare dist&#x27;</span>, size=<span class="hljs-number">13</span>)<br>sns.kdeplot(train_df.Fare, ax=ax)<br>sns.distplot(train_df.Fare,label=<span class="hljs-string">&#x27;fare&#x27;</span>, ax=ax)<br>ax.legend(fontsize=<span class="hljs-number">15</span>)<br>pos = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">201</span>,<span class="hljs-number">25</span>)<br>ax.set_xticks(pos)<br>ax.set_xlim([<span class="hljs-number">0</span>, <span class="hljs-number">200</span>])<br>ax.set_xlabel(<span class="hljs-string">&#x27;&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># dead和alive分别统计的票价分布曲线对比图</span><br>ax1 = plt.subplot2grid((<span class="hljs-number">2</span>,<span class="hljs-number">2</span>), (<span class="hljs-number">1</span>,<span class="hljs-number">0</span>), colspan=<span class="hljs-number">2</span>)<br>ax1.tick_params(labelsize=<span class="hljs-number">10</span>)<br>sns.distplot(train_df[train_df.Survived==<span class="hljs-number">0</span>].Fare, ax=ax1,hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&#x27;dead&#x27;</span>, color=<span class="hljs-string">&#x27;r&#x27;</span>)<br>sns.distplot(train_df[train_df.Survived==<span class="hljs-number">1</span>].Fare, ax=ax1,hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&#x27;alive&#x27;</span>,  color=<span class="hljs-string">&#x27;b&#x27;</span>)<br>ax1.set_xlim([<span class="hljs-number">0</span>,<span class="hljs-number">200</span>])<br>ax1.legend(fontsize=<span class="hljs-number">12</span>)<br><br>ax1.set_xlabel(<span class="hljs-string">&#x27;Fare&#x27;</span>, size=<span class="hljs-number">12</span>)<br>ax1.set_ylabel(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Text(0, 0.5, &#39;&#39;)</code></pre><p><img src="/img/output_25_1.png"></p><p>图中可以看到，低票价（Fare）的乘客中死亡比例极高，而高票价的乘客中获救的人似乎要更多。<br>同时我们注意到，Fare的分布太宽，后续数据处理可以做一下scaling，加速模型收敛。</p><h4 id="4-5-表亲和直亲-SibSp和Parch"><a href="#4-5-表亲和直亲-SibSp和Parch" class="headerlink" title="4.5 表亲和直亲(SibSp和Parch)"></a>4.5 表亲和直亲(SibSp和Parch)</h4><p>SibSp描述了泰坦尼克号上与乘客同行的兄弟姐妹（Siblings）和配偶（Spouse）数目；<br>而Parch描述了泰坦尼克号上与乘客同行的家长（Parents）和孩子（Children）数目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 首先查看数据分布特征</span><br>fig = plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">5</span>))<br>ax1 = fig.add_subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>sns.countplot(train_df.SibSp)<br>ax1.set_title(<span class="hljs-string">&#x27;SibSp&#x27;</span>, size=<span class="hljs-number">13</span>)<br>ax1.set_xlabel(<span class="hljs-string">&#x27;&#x27;</span>)<br>ax1.set_ylabel(<span class="hljs-string">&#x27;Count&#x27;</span>,size=<span class="hljs-number">11</span>)<br><br>ax2 = fig.add_subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, sharex=ax1)<br>sns.countplot(train_df.Parch)<br>ax2.set_xlabel(<span class="hljs-string">&#x27;Parch&#x27;</span>, size=<span class="hljs-number">13</span>)<br>ax2.set_ylabel(<span class="hljs-string">&#x27;Count&#x27;</span>,size=<span class="hljs-number">11</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Text(0, 0.5, &#39;Count&#39;)</code></pre><p><img src="/img/output_28_1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计对比不同sibsp &amp; parch情况下的获救比例</span><br><br>fig = plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">6</span>))<br>ax1 = fig.add_subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>train_df.groupby(<span class="hljs-string">&#x27;SibSp&#x27;</span>)[<span class="hljs-string">&#x27;Survived&#x27;</span>].mean().plot(kind=<span class="hljs-string">&#x27;bar&#x27;</span>,ax= ax1,color=<span class="hljs-string">&#x27;lightseagreen&#x27;</span>)<br>ax1.set_title(<span class="hljs-string">&#x27;Sibsp Survived Rate&#x27;</span>, size=<span class="hljs-number">12</span>)<br>ax1.set_xlabel(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>ax2 = fig.add_subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>train_df.groupby(<span class="hljs-string">&#x27;Parch&#x27;</span>)[<span class="hljs-string">&#x27;Survived&#x27;</span>].mean().plot(kind=<span class="hljs-string">&#x27;bar&#x27;</span>,ax= ax2,color=<span class="hljs-string">&#x27;m&#x27;</span>)<br>ax2.set_title(<span class="hljs-string">&#x27;Parch Survived Rate&#x27;</span>, size=<span class="hljs-number">12</span>)<br>ax2.set_xlabel(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Text(0.5, 0, &#39;&#39;)</code></pre><p><img src="/img/output_29_1.png"></p><p>分组统计不同亲戚类型,即表亲和直亲(SibSp和Parch)和数量的获救率。我们发现，获救率与亲戚的关系可能并不具有简单的线性关系。</p><h3 id="五、特征工程"><a href="#五、特征工程" class="headerlink" title="五、特征工程"></a>五、特征工程</h3><h4 id="5-1-Name特征处理"><a href="#5-1-Name特征处理" class="headerlink" title="5.1 Name特征处理"></a>5.1 Name特征处理</h4><p>充分挖掘和提取Titanic数据集的特征可以有效提高模型精度。因此，我们对name字段进行挖掘和特征的提取</p><h4 id="5-2-Name-Len特征"><a href="#5-2-Name-Len特征" class="headerlink" title="5.2 Name_Len特征"></a>5.2 Name_Len特征</h4><p>由于西方人的名字长度差别较大，且含义丰富，我们首先探索一下名字长度这个特征：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">train_df.groupby(train_df.Name.apply(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">len</span>(x)))[<span class="hljs-string">&#x27;Survived&#x27;</span>].mean().plot(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">5</span>),linewidth=<span class="hljs-number">2</span>,color=<span class="hljs-string">&#x27;g&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Name_length&#x27;</span>,fontsize=<span class="hljs-number">12</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Survived rate&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Text(0, 0.5, &#39;Survived rate&#39;)</code></pre><p><img src="/img/output_33_1.png"></p><p>可以看到名字的长度和获救率还是有一定的正向关系的，可以考虑加入Name_Len特征：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 加入Name_Len特征</span><br>combine_df[<span class="hljs-string">&#x27;Name_Len&#x27;</span>] = combine_df[<span class="hljs-string">&#x27;Name&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">len</span>(x))<br><br><span class="hljs-comment"># Name_Len数据分箱</span><br>combine_df[<span class="hljs-string">&#x27;Name_Len&#x27;</span>] = pd.qcut(combine_df[<span class="hljs-string">&#x27;Name_Len&#x27;</span>],<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h5 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h5><p>数据分箱（也称为离散分箱或分段）是一种数据预处理技术，用于减少次要观察误差的影响，是一种将多个连续值分组为较少数量的“分箱”的方法。</p><h4 id="5-3-Title特征"><a href="#5-3-Title特征" class="headerlink" title="5.3 Title特征"></a>5.3 Title特征</h4><p>西方人名字中含有的称谓信息(数据集中名字中间的单词)也可以在很大程度上反映一个人的身份地位，从数据中提取”Title”（称谓）也可以作为特征，由于有些称谓的人数量过少，我们还需要做一个映射（分组），将一组等效的称谓合并在一起。</p><p>几条有关英语称谓的解释：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>Mme：</strong>相当于Mrs</td><td><strong>Ms：</strong>Ms.或Mz 美国近来用来称呼婚姻状态不明的妇女</td></tr><tr><td><strong>Jonkheer:</strong> 乡绅</td><td><strong>Col：</strong>中校:Lieutenant Colonel(Lt. Col.)上校:Colonel(Col.)</td></tr><tr><td><strong>Lady：</strong>贵族夫人的称呼</td><td><strong>Major：</strong>少校</td></tr><tr><td><strong>Don唐：</strong>是西班牙语中贵族和有地位者的尊称</td><td><strong>Mlle:</strong> 小姐</td></tr><tr><td><strong>sir：</strong>懂的都懂</td><td><strong>Rev：</strong>牧师</td></tr><tr><td><strong>the Countess：</strong>女伯爵</td><td><strong>测试集合中的Dona</strong>：女士尊称</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 称谓的提取和合并</span><br>combine_df[<span class="hljs-string">&#x27;Title&#x27;</span>] = combine_df[<span class="hljs-string">&#x27;Name&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: x.split(<span class="hljs-string">&#x27;, &#x27;</span>)[<span class="hljs-number">1</span>]).apply(<span class="hljs-keyword">lambda</span> x: x.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>])<br>combine_df[<span class="hljs-string">&#x27;Title&#x27;</span>] = combine_df[<span class="hljs-string">&#x27;Title&#x27;</span>].replace([<span class="hljs-string">&#x27;Don&#x27;</span>,<span class="hljs-string">&#x27;Dona&#x27;</span>, <span class="hljs-string">&#x27;Major&#x27;</span>, <span class="hljs-string">&#x27;Capt&#x27;</span>, <span class="hljs-string">&#x27;Jonkheer&#x27;</span>, <span class="hljs-string">&#x27;Rev&#x27;</span>, <span class="hljs-string">&#x27;Col&#x27;</span>,<span class="hljs-string">&#x27;Sir&#x27;</span>,<span class="hljs-string">&#x27;Dr&#x27;</span>],<span class="hljs-string">&#x27;Mr&#x27;</span>)<br>combine_df[<span class="hljs-string">&#x27;Title&#x27;</span>] = combine_df[<span class="hljs-string">&#x27;Title&#x27;</span>].replace([<span class="hljs-string">&#x27;Mlle&#x27;</span>,<span class="hljs-string">&#x27;Ms&#x27;</span>], <span class="hljs-string">&#x27;Miss&#x27;</span>)<br>combine_df[<span class="hljs-string">&#x27;Title&#x27;</span>] = combine_df[<span class="hljs-string">&#x27;Title&#x27;</span>].replace([<span class="hljs-string">&#x27;the Countess&#x27;</span>,<span class="hljs-string">&#x27;Mme&#x27;</span>,<span class="hljs-string">&#x27;Lady&#x27;</span>,<span class="hljs-string">&#x27;Dr&#x27;</span>], <span class="hljs-string">&#x27;Mrs&#x27;</span>)<br><br><span class="hljs-comment"># 分类变量编码，转换为哑变量处理</span><br>df = pd.get_dummies(combine_df[<span class="hljs-string">&#x27;Title&#x27;</span>],prefix=<span class="hljs-string">&#x27;Title&#x27;</span>)<span class="hljs-comment"># prefix：表示列名的前缀</span><br>combine_df = pd.concat([combine_df,df],axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>在特征探索阶段，我们发现男性和女性的获救率分别为女性的0.742038和男性的0.188908；<br>女性死亡以及男性存活概率明显较低，为了提升模型对于这一类群体的识别能力，我们分析数据并找到了一个重要特征“Family”，同一个family下的生存死亡模式有很大程度上是相关的，例如：有一个family有一个女性死亡，这个family其他的女性的死亡概率也比较高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#我们标注出这些特殊的family</span><br><br>combine_df[<span class="hljs-string">&#x27;Surname&#x27;</span>] = combine_df[<span class="hljs-string">&#x27;Name&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x:x.split(<span class="hljs-string">&#x27;,&#x27;</span>)[<span class="hljs-number">0</span>])<br>dead_female_surname = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(combine_df[(combine_df.Sex==<span class="hljs-string">&#x27;female&#x27;</span>) &amp; (combine_df.Age&gt;=<span class="hljs-number">12</span>)<br>                              &amp; (combine_df.Survived==<span class="hljs-number">0</span>) &amp; ((combine_df.Parch&gt;<span class="hljs-number">0</span>) | (combine_df.SibSp &gt; <span class="hljs-number">0</span>))][<span class="hljs-string">&#x27;Surname&#x27;</span>].values))<br>survive_male_surname = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(combine_df[(combine_df.Sex==<span class="hljs-string">&#x27;male&#x27;</span>) &amp; (combine_df.Age&gt;=<span class="hljs-number">12</span>)<br>                              &amp; (combine_df.Survived==<span class="hljs-number">1</span>) &amp; ((combine_df.Parch&gt;<span class="hljs-number">0</span>) | (combine_df.SibSp &gt; <span class="hljs-number">0</span>))][<span class="hljs-string">&#x27;Surname&#x27;</span>].values))<br>combine_df[<span class="hljs-string">&#x27;Dead_female_family&#x27;</span>] = np.where(combine_df[<span class="hljs-string">&#x27;Surname&#x27;</span>].isin(dead_female_surname),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>combine_df[<span class="hljs-string">&#x27;Survive_male_family&#x27;</span>] = np.where(combine_df[<span class="hljs-string">&#x27;Surname&#x27;</span>].isin(survive_male_surname),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>combine_df = combine_df.drop([<span class="hljs-string">&#x27;Name&#x27;</span>,<span class="hljs-string">&#x27;Surname&#x27;</span>],axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="5-4-Age特征"><a href="#5-4-Age特征" class="headerlink" title="5.4  Age特征"></a>5.4  Age特征</h4><p>根据特征探索阶段的分析，小孩的获救率明显较高，可以添加一个小孩标签属性（IsChild）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Age &amp; isChild</span><br>group = combine_df.groupby([<span class="hljs-string">&#x27;Title&#x27;</span>, <span class="hljs-string">&#x27;Pclass&#x27;</span>])[<span class="hljs-string">&#x27;Age&#x27;</span>]<br>combine_df[<span class="hljs-string">&#x27;Age&#x27;</span>] = group.transform(<span class="hljs-keyword">lambda</span> x: x.fillna(x.median()))<br>combine_df = combine_df.drop(<span class="hljs-string">&#x27;Title&#x27;</span>,axis=<span class="hljs-number">1</span>)<br>combine_df[<span class="hljs-string">&#x27;IsChild&#x27;</span>] = np.where(combine_df[<span class="hljs-string">&#x27;Age&#x27;</span>]&lt;=<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<br>combine_df[<span class="hljs-string">&#x27;Age&#x27;</span>] = pd.cut(combine_df[<span class="hljs-string">&#x27;Age&#x27;</span>],<span class="hljs-number">5</span>)<br>combine_df = combine_df.drop(<span class="hljs-string">&#x27;Age&#x27;</span>,axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="5-5-Familysize"><a href="#5-5-Familysize" class="headerlink" title="5.5  Familysize"></a>5.5  Familysize</h4><p>将上面提取过的Familysize再离散化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 分箱，将Familysize=0标注为&#x27;solo&#x27;,Familysize&gt;3为&#x27;big&#x27;，中间为&#x27;normal&#x27;，然后对分类变量编码，转换为哑变量处理</span><br><br>combine_df[<span class="hljs-string">&#x27;FamilySize&#x27;</span>] = np.where(combine_df[<span class="hljs-string">&#x27;SibSp&#x27;</span>]+combine_df[<span class="hljs-string">&#x27;Parch&#x27;</span>]==<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Alone&#x27;</span>,<br>                                    np.where(combine_df[<span class="hljs-string">&#x27;SibSp&#x27;</span>]+combine_df[<span class="hljs-string">&#x27;Parch&#x27;</span>]&lt;=<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Small&#x27;</span>, <span class="hljs-string">&#x27;Big&#x27;</span>))<br>df = pd.get_dummies(combine_df[<span class="hljs-string">&#x27;FamilySize&#x27;</span>],prefix=<span class="hljs-string">&#x27;FamilySize&#x27;</span>)<br>combine_df = pd.concat([combine_df,df],axis=<span class="hljs-number">1</span>).drop([<span class="hljs-string">&#x27;SibSp&#x27;</span>,<span class="hljs-string">&#x27;Parch&#x27;</span>,<span class="hljs-string">&#x27;FamilySize&#x27;</span>],axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="5-6-Ticket特征"><a href="#5-6-Ticket特征" class="headerlink" title="5.6 Ticket特征"></a>5.6 Ticket特征</h4><p>统计发现，【’1’, ‘2’, ‘P’】开头的Ticket获救率更高。可以标注为’High_Survival_Ticket’型票；同理【’A’,’W’,’3’,’7’】为’Low_Survival_Ticket’型票。这样得到High_Survival_Ticket和Low_Survival_Ticket两个新的特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">combine_df[<span class="hljs-string">&#x27;Ticket_Lett&#x27;</span>] = combine_df[<span class="hljs-string">&#x27;Ticket&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">str</span>(x)[<span class="hljs-number">0</span>])<br>combine_df[<span class="hljs-string">&#x27;Ticket_Lett&#x27;</span>] = combine_df[<span class="hljs-string">&#x27;Ticket_Lett&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">str</span>(x))<br><br>combine_df[<span class="hljs-string">&#x27;High_Survival_Ticket&#x27;</span>] = np.where(combine_df[<span class="hljs-string">&#x27;Ticket_Lett&#x27;</span>].isin([<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>]),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<br>combine_df[<span class="hljs-string">&#x27;Low_Survival_Ticket&#x27;</span>] = np.where(combine_df[<span class="hljs-string">&#x27;Ticket_Lett&#x27;</span>].isin([<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;W&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>]),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<br>combine_df = combine_df.drop([<span class="hljs-string">&#x27;Ticket&#x27;</span>,<span class="hljs-string">&#x27;Ticket_Lett&#x27;</span>],axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="5-7-Embarked特征"><a href="#5-7-Embarked特征" class="headerlink" title="5.7 Embarked特征"></a>5.7 Embarked特征</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">ax = plt.figure(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">3</span>)).add_subplot(<span class="hljs-number">111</span>)<br>ax.set_xlim([-<span class="hljs-number">20</span>, <span class="hljs-number">80</span>])<br>sns.kdeplot(train_df[train_df.Embarked==<span class="hljs-string">&#x27;C&#x27;</span>].Age.dropna(), ax=ax, label=<span class="hljs-string">&#x27;C&#x27;</span>)<br>sns.kdeplot(train_df[train_df.Embarked==<span class="hljs-string">&#x27;Q&#x27;</span>].Age.dropna(), ax=ax, label=<span class="hljs-string">&#x27;Q&#x27;</span>)<br>sns.kdeplot(train_df[train_df.Embarked==<span class="hljs-string">&#x27;S&#x27;</span>].Age.dropna(), ax=ax, label=<span class="hljs-string">&#x27;S&#x27;</span>)<br>ax.legend(fontsize=<span class="hljs-number">12</span>)<br>ax.set_title(<span class="hljs-string">&#x27;Embarked Age Dist &#x27;</span>, size=<span class="hljs-number">13</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Text(0.5, 1.0, &#39;Embarked Age Dist &#39;)</code></pre><p><img src="/img/output_49_1.png"></p><p>Embarked字段只有个别缺失，我们选择数量最多且年龄分布正常的港口进行填充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 缺失港口信息填充S，并转换为哑变量</span><br><br>combine_df.Embarked = combine_df.Embarked.fillna(<span class="hljs-string">&#x27;S&#x27;</span>)<br>df = pd.get_dummies(combine_df[<span class="hljs-string">&#x27;Embarked&#x27;</span>],prefix=<span class="hljs-string">&#x27;Embarked&#x27;</span>)<br>combine_df = pd.concat([combine_df,df],axis=<span class="hljs-number">1</span>).drop(<span class="hljs-string">&#x27;Embarked&#x27;</span>,axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="5-8-Cabin特征"><a href="#5-8-Cabin特征" class="headerlink" title="5.8 Cabin特征"></a>5.8 Cabin特征</h4><p>Cabin特征大量缺失，我们将其转化为Cabin_isNull特征，取值域为0和1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">combine_df[<span class="hljs-string">&#x27;Cabin_isNull&#x27;</span>] = np.where(combine_df[<span class="hljs-string">&#x27;Cabin&#x27;</span>].isnull(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>combine_df = combine_df.drop(<span class="hljs-string">&#x27;Cabin&#x27;</span>,axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="5-9-Pclass-amp-Sex特征"><a href="#5-9-Pclass-amp-Sex特征" class="headerlink" title="5.9 Pclass &amp; Sex特征"></a>5.9 Pclass &amp; Sex特征</h4><p>Pclass &amp; Sex特征进行分类数据编码，转化为哑变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Pclass</span><br>df = pd.get_dummies(combine_df[<span class="hljs-string">&#x27;Pclass&#x27;</span>],prefix=<span class="hljs-string">&#x27;Pclass&#x27;</span>)<br>combine_df = pd.concat([combine_df,df],axis=<span class="hljs-number">1</span>).drop(<span class="hljs-string">&#x27;Pclass&#x27;</span>,axis=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Sex</span><br>df = pd.get_dummies(combine_df[<span class="hljs-string">&#x27;Sex&#x27;</span>],prefix=<span class="hljs-string">&#x27;Sex&#x27;</span>)<br>combine_df = pd.concat([combine_df,df],axis=<span class="hljs-number">1</span>).drop(<span class="hljs-string">&#x27;Sex&#x27;</span>,axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="5-10-Fare特征"><a href="#5-10-Fare特征" class="headerlink" title="5.10 Fare特征"></a>5.10 Fare特征</h4><p>缺省值用众数填充，之后进行离散化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Fare</span><br>combine_df[<span class="hljs-string">&#x27;Fare&#x27;</span>].fillna(combine_df[<span class="hljs-string">&#x27;Fare&#x27;</span>].dropna().median(),inplace=<span class="hljs-literal">True</span>)<br>combine_df[<span class="hljs-string">&#x27;Low_Fare&#x27;</span>] = np.where(combine_df[<span class="hljs-string">&#x27;Fare&#x27;</span>]&lt;=<span class="hljs-number">8.662</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<br>combine_df[<span class="hljs-string">&#x27;High_Fare&#x27;</span>] = np.where(combine_df[<span class="hljs-string">&#x27;Fare&#x27;</span>]&gt;=<span class="hljs-number">26</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<br>combine_df = combine_df.drop(<span class="hljs-string">&#x27;Fare&#x27;</span>,axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="六、-模型训练-测试"><a href="#六、-模型训练-测试" class="headerlink" title="六、 模型训练/测试"></a>六、 模型训练/测试</h3><p>查看我们现在有哪些特征：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">combine_df.columns<br></code></pre></td></tr></table></figure><pre><code class="hljs">Index([&#39;PassengerId&#39;, &#39;Survived&#39;, &#39;Name_Len&#39;, &#39;Title_Master&#39;, &#39;Title_Miss&#39;,       &#39;Title_Mr&#39;, &#39;Title_Mrs&#39;, &#39;Dead_female_family&#39;, &#39;Survive_male_family&#39;,       &#39;IsChild&#39;, &#39;FamilySize_Alone&#39;, &#39;FamilySize_Big&#39;, &#39;FamilySize_Small&#39;,       &#39;High_Survival_Ticket&#39;, &#39;Low_Survival_Ticket&#39;, &#39;Embarked_C&#39;,       &#39;Embarked_Q&#39;, &#39;Embarked_S&#39;, &#39;Cabin_isNull&#39;, &#39;Pclass_1&#39;, &#39;Pclass_2&#39;,       &#39;Pclass_3&#39;, &#39;Sex_female&#39;, &#39;Sex_male&#39;, &#39;Low_Fare&#39;, &#39;High_Fare&#39;],      dtype=&#39;object&#39;)</code></pre><p>所有特征转化成数值型编码：</p><p>LabelEncoder是用来对分类型特征值进行编码，即对不连续的数值或文本进行编码。其中包含以下常用方法：</p><ol><li>fit(y) ：fit可看做一本空字典，y可看作要塞到字典中的词。</li><li>fit_transform(y)：相当于先进行fit再进行transform，即把y塞到字典中去以后再进行transform得到索引值。</li><li>inverse_transform(y)：根据索引值y获得原始数据。</li><li>transform(y) ：将y转变成索引值。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">features = combine_df.drop([<span class="hljs-string">&quot;PassengerId&quot;</span>,<span class="hljs-string">&quot;Survived&quot;</span>], axis=<span class="hljs-number">1</span>).columns<br>le = LabelEncoder()<br><span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> features:<br>    combine_df[feature]=le.fit_transform(combine_df[feature])<br>    <span class="hljs-comment"># 和以下两行等价</span><br>    <span class="hljs-comment"># le = le.fit(combine_df[feature])# fit(),将所有特征转化成数值型编码</span><br>    <span class="hljs-comment"># combine_df[feature] = le.transform(combine_df[feature])</span><br>combine_df<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Name_Len</th>      <th>Title_Master</th>      <th>Title_Miss</th>      <th>Title_Mr</th>      <th>Title_Mrs</th>      <th>Dead_female_family</th>      <th>Survive_male_family</th>      <th>IsChild</th>      <th>...</th>      <th>Embarked_Q</th>      <th>Embarked_S</th>      <th>Cabin_isNull</th>      <th>Pclass_1</th>      <th>Pclass_2</th>      <th>Pclass_3</th>      <th>Sex_female</th>      <th>Sex_male</th>      <th>Low_Fare</th>      <th>High_Fare</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0.0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1.0</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1.0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>1.0</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0.0</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>413</th>      <td>1305</td>      <td>NaN</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>414</th>      <td>1306</td>      <td>NaN</td>      <td>3</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>415</th>      <td>1307</td>      <td>NaN</td>      <td>3</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>416</th>      <td>1308</td>      <td>NaN</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>417</th>      <td>1309</td>      <td>NaN</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><p>1309 rows × 26 columns</p></div><h4 id="6-1-模型搭建"><a href="#6-1-模型搭建" class="headerlink" title="6.1 模型搭建"></a>6.1 模型搭建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">X_all = combine_df.iloc[:<span class="hljs-number">891</span>,:].drop([<span class="hljs-string">&quot;PassengerId&quot;</span>,<span class="hljs-string">&quot;Survived&quot;</span>], axis=<span class="hljs-number">1</span>)<br>Y_all = combine_df.iloc[:<span class="hljs-number">891</span>,:][<span class="hljs-string">&quot;Survived&quot;</span>]<br>X_test = combine_df.iloc[<span class="hljs-number">891</span>:,:].drop([<span class="hljs-string">&quot;PassengerId&quot;</span>,<span class="hljs-string">&quot;Survived&quot;</span>], axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="6-2-模型与参数初始化"><a href="#6-2-模型与参数初始化" class="headerlink" title="6.2 模型与参数初始化"></a>6.2 模型与参数初始化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 考察逻辑回归、支持向量机、最近邻、决策树、随机森林、gbdt、xgbGBDT几类算法的性能</span><br>logreg = LogisticRegression()<br>svc = SVC()<br>knn = KNeighborsClassifier(n_neighbors = <span class="hljs-number">5</span>)<br>decision_tree = DecisionTreeClassifier()<br>random_forest = RandomForestClassifier(n_estimators=<span class="hljs-number">300</span>,min_samples_leaf=<span class="hljs-number">4</span>,class_weight=&#123;<span class="hljs-number">0</span>:<span class="hljs-number">0.745</span>,<span class="hljs-number">1</span>:<span class="hljs-number">0.255</span>&#125;)<br>gbdt = GradientBoostingClassifier(n_estimators=<span class="hljs-number">300</span>,learning_rate=<span class="hljs-number">0.05</span>,max_depth=<span class="hljs-number">3</span>)<br>xgb = XGBClassifier(max_depth=<span class="hljs-number">6</span>, n_estimators=<span class="hljs-number">400</span>, learning_rate=<span class="hljs-number">0.02</span>)<br>lgb = LGBMClassifier(max_depth=<span class="hljs-number">6</span>, n_estimators=<span class="hljs-number">300</span>, learning_rate=<span class="hljs-number">0.02</span>)<br>clfs = [logreg, svc, knn, decision_tree, random_forest, gbdt, xgb, lgb]<br><br></code></pre></td></tr></table></figure><h4 id="6-3-网格参数搜索"><a href="#6-3-网格参数搜索" class="headerlink" title="6.3 网格参数搜索"></a>6.3 网格参数搜索</h4><p>sklearn.model_selection库中有GridSearchCV方法，作用是搜索模型的最优参数。<br>我们使用GridSearchCV初步选择参数，后续再不断返回调参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># clfs = [logreg, svc, knn, decision_tree, random_forest, gbdt, xgb, lgb]</span><br><br><span class="hljs-comment">#XGboost 参数搜索</span><br>gsCv = GridSearchCV(xgb,<br>                   &#123;<span class="hljs-string">&#x27;max_depth&#x27;</span>: [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>],<br>                    <span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">300</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>],<br>                   <span class="hljs-string">&#x27;learning_rate&#x27;</span>:[<span class="hljs-number">0.01</span>,<span class="hljs-number">0.02</span>,<span class="hljs-number">0.03</span>,<span class="hljs-number">0.04</span>]<br>                   &#125;)<br>gsCv.fit(X_all,Y_all)<br><br><span class="hljs-built_in">print</span>(gsCv.best_score_)<br><span class="hljs-built_in">print</span>(gsCv.best_params_)<br></code></pre></td></tr></table></figure><pre><code class="hljs">0.8911116690728769&#123;&#39;learning_rate&#39;: 0.02, &#39;max_depth&#39;: 6, &#39;n_estimators&#39;: 400&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#lightgbm 参数搜索</span><br>gsCv = GridSearchCV(lgb,<br>                   &#123;<span class="hljs-string">&#x27;max_depth&#x27;</span>: [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>],<br>                    <span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">200</span>,<span class="hljs-number">300</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>],<br>                   <span class="hljs-string">&#x27;learning_rate&#x27;</span>:[<span class="hljs-number">0.01</span>,<span class="hljs-number">0.02</span>,<span class="hljs-number">0.03</span>,<span class="hljs-number">0.04</span>]<br>                   &#125;)<br>gsCv.fit(X_all,Y_all)<br><br><span class="hljs-built_in">print</span>(gsCv.best_score_)<br><span class="hljs-built_in">print</span>(gsCv.best_params_)<br></code></pre></td></tr></table></figure><pre><code class="hljs">0.8866172870504048&#123;&#39;learning_rate&#39;: 0.02, &#39;max_depth&#39;: 6, &#39;n_estimators&#39;: 300&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#GBDT 参数搜索</span><br>gsCv = GridSearchCV(gbdt,<br>                   &#123;<span class="hljs-string">&#x27;max_depth&#x27;</span>: [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],<br>                    <span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">200</span>,<span class="hljs-number">300</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>],<br>                   <span class="hljs-string">&#x27;learning_rate&#x27;</span>:[<span class="hljs-number">0.04</span>,<span class="hljs-number">0.05</span>,<span class="hljs-number">0.06</span>]<br>                   &#125;)<br>gsCv.fit(X_all,Y_all)<br><br><span class="hljs-built_in">print</span>(gsCv.best_score_)<br><span class="hljs-built_in">print</span>(gsCv.best_params_)<br></code></pre></td></tr></table></figure><pre><code class="hljs">0.8899943506371226&#123;&#39;learning_rate&#39;: 0.05, &#39;max_depth&#39;: 3, &#39;n_estimators&#39;: 300&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#KNN 参数搜索</span><br>gsCv = GridSearchCV(knn,<br>                   &#123;<span class="hljs-string">&#x27;n_neighbors&#x27;</span>:[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]&#125;)<br>gsCv.fit(X_all,Y_all)<br><br><span class="hljs-built_in">print</span>(gsCv.best_score_)<br><span class="hljs-built_in">print</span>(gsCv.best_params_)<br></code></pre></td></tr></table></figure><pre><code class="hljs">0.8529659155106396&#123;&#39;n_neighbors&#39;: 5&#125;</code></pre><h4 id="6-4-K折交叉验证"><a href="#6-4-K折交叉验证" class="headerlink" title="6.4 K折交叉验证"></a>6.4 K折交叉验证</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># K折交叉验证</span><br><br>kfold = <span class="hljs-number">10</span><br>cv_results = []<br><span class="hljs-keyword">for</span> classifier <span class="hljs-keyword">in</span> clfs :<br>    cv_results.append(cross_val_score(classifier, X_all.values, y = Y_all.values, scoring = <span class="hljs-string">&quot;accuracy&quot;</span>, cv = kfold, n_jobs=<span class="hljs-number">4</span>))<br><br><span class="hljs-comment"># cv_results 为8*10的结果矩阵</span><br>cv_means = []<br>cv_std = []<br><span class="hljs-keyword">for</span> cv_result <span class="hljs-keyword">in</span> cv_results:<br>    cv_means.append(cv_result.mean())<br>    cv_std.append(cv_result.std())<br><br>ag = [<span class="hljs-string">&quot;logreg&quot;</span>,<span class="hljs-string">&quot;SVC&quot;</span>,<span class="hljs-string">&#x27;KNN&#x27;</span>,<span class="hljs-string">&#x27;decision_tree&#x27;</span>,<span class="hljs-string">&quot;random_forest&quot;</span>,<span class="hljs-string">&quot;GBDT&quot;</span>,<span class="hljs-string">&quot;xgbGBDT&quot;</span>, <span class="hljs-string">&quot;LGB&quot;</span>]<br>cv_res = pd.DataFrame(&#123;<span class="hljs-string">&quot;CrossValMeans&quot;</span>:cv_means,<span class="hljs-string">&quot;CrossValerrors&quot;</span>: cv_std,<br>                       <span class="hljs-string">&quot;Algorithm&quot;</span>:ag&#125;)<br><br>g = sns.barplot(<span class="hljs-string">&quot;CrossValMeans&quot;</span>,<span class="hljs-string">&quot;Algorithm&quot;</span>,data = cv_res, palette=<span class="hljs-string">&quot;Blues&quot;</span>)<br>g.set_xlabel(<span class="hljs-string">&quot;CrossValMeans&quot;</span>,fontsize=<span class="hljs-number">10</span>)<br>g.set_ylabel(<span class="hljs-string">&#x27;&#x27;</span>)<br>plt.xticks(rotation=<span class="hljs-number">30</span>)<br>g = g.set_title(<span class="hljs-string">&quot;10-fold Cross validation scores&quot;</span>,fontsize=<span class="hljs-number">12</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/output_17_1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 展示10-fold Cross validation的均值得分结果</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; : &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ag[i],cv_means[i]))<br></code></pre></td></tr></table></figure><pre><code class="hljs">logreg : 0.8731585518102373SVC : 0.8776404494382023KNN : 0.8540823970037452decision_tree : 0.8652559300873908random_forest : 0.8563920099875156GBDT : 0.8832459425717852xgbGBDT : 0.8843820224719101LGB : 0.8799001248439451</code></pre><h4 id="6-5-训练-验证过程可视化"><a href="#6-5-训练-验证过程可视化" class="headerlink" title="6.5 训练/验证过程可视化"></a>6.5 训练/验证过程可视化</h4><p>将模型训练过程的学习曲线打印出来，看下是否存在过拟合/欠拟合情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用sklearn的learning_curve得到training_score和cv_score，使用matplotlib画出learning curve</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_learning_curve</span>(<span class="hljs-params">clf, title, X, y, ylim=<span class="hljs-literal">None</span>, cv=<span class="hljs-literal">None</span>, n_jobs=<span class="hljs-number">3</span>, train_sizes=np.linspace(<span class="hljs-params"><span class="hljs-number">.05</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">5</span></span>)</span>):</span><br>    train_sizes, train_scores, test_scores = learning_curve(<br>        clf, X, y, train_sizes=train_sizes)<br>    train_scores_mean = np.mean(train_scores, axis=<span class="hljs-number">1</span>)<br>    train_scores_std = np.std(train_scores, axis=<span class="hljs-number">1</span>)<br>    test_scores_mean = np.mean(test_scores, axis=<span class="hljs-number">1</span>)<br>    test_scores_std = np.std(test_scores, axis=<span class="hljs-number">1</span>)<br>    <br>    ax = plt.figure().add_subplot(<span class="hljs-number">111</span>)<br>    ax.set_title(title)<br>    <span class="hljs-keyword">if</span> ylim <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        ax.ylim(*ylim)<br>    ax.set_xlabel(<span class="hljs-string">u&quot;train_num_of_samples&quot;</span>)<br>    ax.set_ylabel(<span class="hljs-string">u&quot;score&quot;</span>)<br><br>    ax.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, <br>                     alpha=<span class="hljs-number">0.1</span>, color=<span class="hljs-string">&quot;b&quot;</span>)<br>    ax.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, <br>                     alpha=<span class="hljs-number">0.1</span>, color=<span class="hljs-string">&quot;r&quot;</span>)<br>    ax.plot(train_sizes, train_scores_mean, <span class="hljs-string">&#x27;o-&#x27;</span>, color=<span class="hljs-string">&quot;b&quot;</span>, label=<span class="hljs-string">u&quot;train score&quot;</span>)<br>    ax.plot(train_sizes, test_scores_mean, <span class="hljs-string">&#x27;o-&#x27;</span>, color=<span class="hljs-string">&quot;r&quot;</span>, label=<span class="hljs-string">u&quot;testCV score&quot;</span>)<br><br>    ax.legend(loc=<span class="hljs-string">&quot;best&quot;</span>)<br><br>    midpoint = ((train_scores_mean[-<span class="hljs-number">1</span>] + train_scores_std[-<span class="hljs-number">1</span>]) + (test_scores_mean[-<span class="hljs-number">1</span>] - test_scores_std[-<span class="hljs-number">1</span>])) / <span class="hljs-number">2</span><br>    diff = (train_scores_mean[-<span class="hljs-number">1</span>] + train_scores_std[-<span class="hljs-number">1</span>]) - (test_scores_mean[-<span class="hljs-number">1</span>] - test_scores_std[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> midpoint, diff<br><br>alg_list=[<span class="hljs-string">&#x27;logreg&#x27;</span>, <span class="hljs-string">&#x27;svc&#x27;</span>, <span class="hljs-string">&#x27;knn&#x27;</span>, <span class="hljs-string">&#x27;decision_tree&#x27;</span>, <span class="hljs-string">&#x27;random_forest&#x27;</span>, <span class="hljs-string">&#x27;gbdt&#x27;</span>, <span class="hljs-string">&#x27;xgb&#x27;</span>, <span class="hljs-string">&#x27;lgb&#x27;</span>]<br><br>plot_learning_curve(clfs[<span class="hljs-number">0</span>], alg_list[<span class="hljs-number">0</span>], X_all, Y_all)<br>plot_learning_curve(clfs[<span class="hljs-number">1</span>], alg_list[<span class="hljs-number">1</span>], X_all, Y_all)<br>plot_learning_curve(clfs[<span class="hljs-number">2</span>], alg_list[<span class="hljs-number">2</span>], X_all, Y_all)<br>plot_learning_curve(clfs[<span class="hljs-number">3</span>], alg_list[<span class="hljs-number">3</span>], X_all, Y_all)<br>plot_learning_curve(clfs[<span class="hljs-number">4</span>], alg_list[<span class="hljs-number">4</span>], X_all, Y_all)<br>plot_learning_curve(clfs[<span class="hljs-number">5</span>], alg_list[<span class="hljs-number">5</span>], X_all, Y_all)<br>plot_learning_curve(clfs[<span class="hljs-number">6</span>], alg_list[<span class="hljs-number">6</span>], X_all, Y_all)<br>plot_learning_curve(clfs[<span class="hljs-number">7</span>], alg_list[<span class="hljs-number">7</span>], X_all, Y_all)<br></code></pre></td></tr></table></figure><pre><code class="hljs">(0.8944812361959231, 0.04456088047192275)</code></pre><p><img src="/img/output_74_1.png"></p><p><img src="/img/output_74_2.png"></p><p><img src="/img/output_74_3.png"></p><p><img src="/img/output_74_4.png"></p><p><img src="/img/output_74_5.png"></p><p><img src="/img/output_74_6.png"></p><p><img src="/img/output_74_7.png"></p><p><img src="/img/output_74_8.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_score<br><br><span class="hljs-comment"># 定义集成框架</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bagging</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-comment"># sklearn机器学习算法的实现都属于estimators的子类：</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,estimators</span>):</span><br>        self.estimator_names = []<br>        self.estimators = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> estimators:<br>            self.estimator_names.append(i[<span class="hljs-number">0</span>])<br>            self.estimators.append(i[<span class="hljs-number">1</span>])<br>        self.clf = LogisticRegression()<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span>(<span class="hljs-params">self, train_x, train_y</span>):</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.estimators:<br>            i.fit(train_x,train_y)<br>        x = np.array([i.predict(train_x) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.estimators]).T<br>        y = train_y<br>        self.clf.fit(x, y)<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">predict</span>(<span class="hljs-params">self,x</span>):</span><br>        x = np.array([i.predict(x) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.estimators]).T<br>        <span class="hljs-comment">#print(x)</span><br>        <span class="hljs-keyword">return</span> self.clf.predict(x)<br>        <br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">score</span>(<span class="hljs-params">self,x,y</span>):</span><br>        s = precision_score(y,self.predict(x))<br>        <span class="hljs-comment">#print(s)</span><br>        <span class="hljs-keyword">return</span> s<br></code></pre></td></tr></table></figure><h4 id="6-6-模型集成与验证（Bagging）"><a href="#6-6-模型集成与验证（Bagging）" class="headerlink" title="6.6 模型集成与验证（Bagging）"></a>6.6 模型集成与验证（Bagging）</h4><p>选择训练结果最好的四个基学习器进行集成（Bagging）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># logreg = LogisticRegression()</span><br><span class="hljs-comment"># random_forest = RandomForestClassifier(n_estimators=300,min_samples_leaf=4,class_weight=&#123;0:0.745,1:0.255&#125;)</span><br><span class="hljs-comment"># gbdt = GradientBoostingClassifier(n_estimators=500,learning_rate=0.03,max_depth=3)</span><br><span class="hljs-comment">#xgb = XGBClassifier(max_depth=3, n_estimators=500, learning_rate=0.03)</span><br><span class="hljs-comment">#clfs = [logreg, svc, knn, decision_tree, random_forest, gbdt, xgb]</span><br><br><span class="hljs-comment"># 选择训练结果最好的四个基学习器集成（Bagging）</span><br><br>bag = Bagging([(<span class="hljs-string">&#x27;xgb&#x27;</span>,xgb),(<span class="hljs-string">&#x27;logreg&#x27;</span>,logreg),(<span class="hljs-string">&#x27;gbdt&#x27;</span>,gbdt), (<span class="hljs-string">&quot;lgb&quot;</span>, lgb)])<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_score<br></code></pre></td></tr></table></figure><p>X_all，Y_all中按照4：1的比例划分训练数据和测试数据，简化起见没有划分验证集（validation data）用于参数调优，使用训练数据训练我们的集成模型。在划分的测试集上进行预测，并计算模型准确率（Accuracy）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">score = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">20</span>):<br>    num_test = <span class="hljs-number">0.20</span><br>    X_train, X_cv, Y_train, Y_cv = train_test_split(X_all.values, Y_all.values, test_size=num_test)<br>    bag.fit(X_train, Y_train)<br>    <span class="hljs-comment">#Y_test = bag.predict(X_test)</span><br>    acc_ = <span class="hljs-built_in">round</span>(bag.score(X_cv, Y_cv) * <span class="hljs-number">100</span>, <span class="hljs-number">2</span>)<br>    score+=acc_<br>score/<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">88.43750000000001</code></pre><h3 id="七、进行预测"><a href="#七、进行预测" class="headerlink" title="七、进行预测"></a>七、进行预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># submission存储了预测结果</span><br>bag.fit(X_all.values, Y_all.values)<br>Y_test = bag.predict(X_test.values).astype(<span class="hljs-built_in">int</span>)<br>submission = pd.DataFrame(&#123;<br>        <span class="hljs-string">&quot;PassengerId&quot;</span>: test_df[<span class="hljs-string">&quot;PassengerId&quot;</span>],<br>        <span class="hljs-string">&quot;Survived&quot;</span>: Y_test<br>    &#125;)<br>submission.to_csv(<span class="hljs-string">r&#x27;predictedData.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h3 id="八、评价与总结"><a href="#八、评价与总结" class="headerlink" title="八、评价与总结"></a>八、评价与总结</h3><ul><li>数据集选择了经典的kaggle数据竞赛中的Titanic数据集。对于我这样的数据科学、机器学习初学者来说，在该数据集基础上可以找到大量来自大神的实现参考，利于快速上手入门；</li><li>没有花时间在’’炼丹’’上，只是使用sklearn.model_selection模块中的网格参数搜索函数GridSearchCV进行了较为简单的参数选择。不过我们还是在训练集和测试集都表现出了较高的精度 ，同时没有明显的过拟合或者欠拟合现象。</li><li>起初只是想学习并做一个使用GBDT算法的小项目（基于XGboost），但是发现了大神使用集成的方法进行过相关的实现，所以虚心进行了学习 (•ิ_•ิ)</li><li>本人知识，经验十分有限，如果有处理不当或者错误的地方还请谅解。</li></ul><h3 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h3><p>｡:.ﾟヽ(｡◕‿◕｡)ﾉﾟ.:｡+ﾟ</p>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
      <category>Kaggle</category>
      
      <category>集成学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>集成学习</tag>
      
      <tag>Titanic</tag>
      
      <tag>Kaggle</tag>
      
      <tag>ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python计算圆周率</title>
    <link href="/2022/10/18/Python%E8%AE%A1%E7%AE%97%E5%9C%86%E5%91%A8%E7%8E%87/"/>
    <url>/2022/10/18/Python%E8%AE%A1%E7%AE%97%E5%9C%86%E5%91%A8%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<p>第一次python上机课，老师找了一个知乎上的问题：“ 圆周率pi比较著名的无穷级数公式有哪些？”<br>好家伙，原来前人研究了这么多使用级数计算圆周率的方法，五种方案的详细叙述在<br><a href="https://www.zhihu.com/question/402311979">https://www.zhihu.com/question/402311979</a></p><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">%matplotlib inline<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> math<br><span class="hljs-comment"># matplotlib 中文支持</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]  <span class="hljs-comment"># 用来正常显示中文标签</span><br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 用来正常显示负号</span><br><br><br><span class="hljs-comment"># 根据求解方案一，计算结果和收敛过程</span><br>temp = <span class="hljs-number">0</span><br>n = <span class="hljs-number">0</span><br>x_list = []<br>y_list = []<br><br><span class="hljs-keyword">while</span> n&lt;<span class="hljs-number">628</span>:<br>    temp += (-<span class="hljs-number">1</span>)**n/(<span class="hljs-number">2</span>*n+<span class="hljs-number">1</span>)<br>    Pi = <span class="hljs-number">4</span> * temp    <br>    y_list.append(Pi)<br>    x_list.append(n)<br>    n +=<span class="hljs-number">1</span><br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n从0开始取，项数N=628, value of Pi is &#123;&#125;（四舍五入）&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">round</span>(Pi,<span class="hljs-number">2</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exact value is: &#x27;</span>,Pi)<br><br>plt.plot(x_list, y_list)<br>plt.title(<span class="hljs-string">&#x27;方案一计算收敛图&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;N value&#x27;</span>)<span class="hljs-comment"># x轴标题</span><br>plt.ylabel(<span class="hljs-string">&#x27;Pi value&#x27;</span>)  <span class="hljs-comment"># y轴标题</span><br>plt.show()<br></code></pre></td></tr></table></figure><pre><code class="hljs">n从0开始取，项数N=628, value of Pi is 3.14（四舍五入）Exact value is:  3.1400002979112887</code></pre><p><img src="/img/output_2_1.png"></p><h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 根据求解方案二，计算结果和收敛过程,由于收敛极快，不便于可视化展示，我们打印输出观察收敛情况。</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">doubleFactorial</span>(<span class="hljs-params">n</span>):</span><br>    ans=<span class="hljs-number">1</span>                         <span class="hljs-comment">#初始值</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n,<span class="hljs-number">0</span>,-<span class="hljs-number">2</span>):    <span class="hljs-comment">#循环遍历</span><br>        ans*=i                    <span class="hljs-comment">#2021*2019*2017*····*3*1</span><br>    <span class="hljs-keyword">return</span> ans<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solve2</span>(<span class="hljs-params">N</span>):</span><br>    temp2 = <span class="hljs-number">0</span><br>    n_2 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> n_2&lt;N:<br>        temp2 += doubleFactorial(<span class="hljs-number">2</span>*n_2+<span class="hljs-number">1</span>)/(doubleFactorial(<span class="hljs-number">2</span>*n_2)*(<span class="hljs-number">2</span>*n_2+<span class="hljs-number">1</span>)*(<span class="hljs-number">2</span>*n_2+<span class="hljs-number">1</span>)*math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>*n_2+<span class="hljs-number">1</span>))<br>        n_2 += <span class="hljs-number">1</span><br>    Pi_2 = <span class="hljs-number">6</span>*temp2<br>    <span class="hljs-keyword">return</span> Pi_2<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n从0开始取，项数N=3, value of Pi is &#123;&#125;（四舍五入后）&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">round</span>(solve2(<span class="hljs-number">3</span>),<span class="hljs-number">2</span>)))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;N=&#123;0&#125;, the exact value of Pi is &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i,solve2(i)))<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">n从0开始取，项数N=3, value of Pi is 3.14（四舍五入后）N=0, the exact value of Pi is 0N=1, the exact value of Pi is 3.0N=2, the exact value of Pi is 3.125N=3, the exact value of Pi is 3.1390625N=4, the exact value of Pi is 3.1411551339285717N=5, the exact value of Pi is 3.14151117234003N=6, the exact value of Pi is 3.141576715774867N=7, the exact value of Pi is 3.141589425319122N=8, the exact value of Pi is 3.141591982358383N=9, the exact value of Pi is 3.141592511157863</code></pre><h3 id="方案三："><a href="#方案三：" class="headerlink" title="方案三："></a>方案三：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 根据求解方案三，计算结果和收敛过程</span><br><br>temp3 = <span class="hljs-number">0</span><br>n_3 = <span class="hljs-number">0</span><br>x_list3 = []<br>y_list3 = []<br><span class="hljs-keyword">while</span> n_3 &lt; <span class="hljs-number">200</span>:<br>    temp3 += <span class="hljs-number">1</span>/(<span class="hljs-number">2</span>*n_3+<span class="hljs-number">1</span>)**<span class="hljs-number">2</span><br>    Pi_3 = math.sqrt(<span class="hljs-number">8</span> * temp3)<br>    y_list3.append(Pi_3)<br>    x_list3.append(n_3)<br>    n_3 += <span class="hljs-number">1</span><br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n从0开始取，项数N=200, value of Pi is &#123;&#125;（四舍五入）&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">round</span>(Pi_3,<span class="hljs-number">2</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exact value is: &#x27;</span>,Pi_3)<br><br>plt.plot(x_list3, y_list3, <span class="hljs-string">&#x27;g&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;方案三计算收敛图&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;N value&#x27;</span>)<span class="hljs-comment"># x轴标题</span><br>plt.ylabel(<span class="hljs-string">&#x27;Pi value&#x27;</span>)  <span class="hljs-comment"># y轴标题</span><br>plt.show()<br></code></pre></td></tr></table></figure><pre><code class="hljs">n从0开始取，项数N=200, value of Pi is 3.14（四舍五入）Exact value is:  3.140000704127709</code></pre><p>  <img src="/img/output_6_1.png">  </p><h3 id="方案四"><a href="#方案四" class="headerlink" title="方案四:"></a>方案四:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 根据求解方案四，计算结果和收敛过程</span><br><br>temp4 = <span class="hljs-number">0</span><br>n_4 = <span class="hljs-number">1</span><br>x_list4 = []<br>y_list4 = []<br><span class="hljs-keyword">while</span> n_4&lt;<span class="hljs-number">6</span>:<br>    temp4 += <span class="hljs-number">1</span>/n_4**<span class="hljs-number">4</span><br>    Pi_4 = math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">90</span>*temp4, <span class="hljs-number">1</span>/<span class="hljs-number">4</span>)<br>    y_list4.append(Pi_4)<br>    x_list4.append(n_4)<br>    n_4 += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n从1开始取，项数N=5, value of Pi is &#123;&#125;（四舍五入）&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">round</span>(Pi_4,<span class="hljs-number">2</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exact value is: &#x27;</span>,Pi_4)<br><br>plt.plot(x_list4, y_list4, <span class="hljs-string">&#x27;r&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;方案四计算收敛图&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;N value&#x27;</span>)<span class="hljs-comment"># x轴标题</span><br>plt.ylabel(<span class="hljs-string">&#x27;Pi value&#x27;</span>)  <span class="hljs-comment"># y轴标题</span><br>plt.show()<br></code></pre></td></tr></table></figure><pre><code class="hljs">n从1开始取，项数N=5, value of Pi is 3.14（四舍五入）Exact value is:  3.140161179474259</code></pre><p><img src="/img/output_8_1.png">    </p><h3 id="方案五："><a href="#方案五：" class="headerlink" title="方案五："></a>方案五：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;根据求解方案五，计算结果和收敛过程，由于只需极小的N即可达到收敛，</span><br><span class="hljs-string">无需进行可视化，定义计算 Pi 的函数，计算前几个N值观察即可。&#x27;&#x27;&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">PiCalcute5</span>(<span class="hljs-params">N</span>):</span><br>    n_5 = <span class="hljs-number">0</span><br>    temp5 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> n_5 &lt;= N:<br>        temp5 += (math.factorial(<span class="hljs-number">4</span>*n_5)*(<span class="hljs-number">26390</span>*n_5+<span class="hljs-number">1103</span>))/(math.<span class="hljs-built_in">pow</span>(math.factorial(n_5),<span class="hljs-number">4</span>)*math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">396</span>,(<span class="hljs-number">4</span>*n_5)))<br>        n_5 += <span class="hljs-number">1</span><br>    Pi_5 = <span class="hljs-number">9801</span>/(temp5*(<span class="hljs-number">2</span>*math.sqrt(<span class="hljs-number">2</span>)))<br>    <span class="hljs-keyword">return</span> Pi_5<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;While N=1,the estimate value of Pi is &#123;0:.2f&#125;（四舍五入）&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">round</span>(PiCalcute5(<span class="hljs-number">1</span>),<span class="hljs-number">2</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=1, Pi=&#x27;</span>,PiCalcute5(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=2, Pi=&#x27;</span>,PiCalcute5(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=3, Pi=&#x27;</span>,PiCalcute5(<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=4, Pi= ...&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">While N=1,the estimate value of Pi is 3.14（四舍五入）n=1, Pi= 3.141592653589794n=2, Pi= 3.141592653589793n=3, Pi= 3.141592653589793n=4, Pi= ...</code></pre><h3 id="求解方案的效率对比："><a href="#求解方案的效率对比：" class="headerlink" title="求解方案的效率对比："></a>求解方案的效率对比：</h3><p>我们还可以计算对比五种求解方案的效率，借助datetime库计算不同计算方案下， 达到指定精确度（3.14）时所用的时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> timeit <span class="hljs-keyword">import</span> default_timer <span class="hljs-keyword">as</span> timer<br><br><span class="hljs-string">&#x27;&#x27;&#x27;为了对比五种级数计算算法的效率，我们可以借助datetime库计算不同计算方案下，</span><br><span class="hljs-string">达到指定精确度（3.14）时所用的时间&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 方案一：</span><br>start1 = timer()<br><br>temp1 = <span class="hljs-number">0</span><br>n1 = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> n1 &lt; <span class="hljs-number">628</span>:<br>    temp1 += (-<span class="hljs-number">1</span>) ** n1 / (<span class="hljs-number">2</span> * n1 + <span class="hljs-number">1</span>)<br>    n1 += <span class="hljs-number">1</span><br>Pi_1 = <span class="hljs-number">4</span> * temp1<br><br>end1 = timer()<br>t1 = (end1 - start1) * <span class="hljs-number">1000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;方案一： &#x27;</span>, Pi_1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Running time: %s ms&#x27;</span> % t1)<br><br><span class="hljs-comment"># 方案二：</span><br>start2 = timer()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">doubleFactorial</span>(<span class="hljs-params">n</span>):</span><br>    ans = <span class="hljs-number">1</span>  <span class="hljs-comment"># 初始值</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n, <span class="hljs-number">0</span>, -<span class="hljs-number">2</span>):  <span class="hljs-comment"># 循环遍历</span><br>        ans *= i  <span class="hljs-comment"># 2021*2019*2017*····*3*1</span><br>    <span class="hljs-keyword">return</span> ans<br><br>temp2 = <span class="hljs-number">0</span><br>n_2 = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> n_2 &lt; <span class="hljs-number">3</span>:<br>    temp2 += doubleFactorial(<span class="hljs-number">2</span> * n_2 + <span class="hljs-number">1</span>) / (<br>            doubleFactorial(<span class="hljs-number">2</span> * n_2) * (<span class="hljs-number">2</span> * n_2 + <span class="hljs-number">1</span>) * (<span class="hljs-number">2</span> * n_2 + <span class="hljs-number">1</span>) * math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span> * n_2 + <span class="hljs-number">1</span>))<br>    n_2 += <span class="hljs-number">1</span><br>Pi_2 = <span class="hljs-number">6</span> * temp2<br><br>end2 = timer()<br>t2 = (end2 - start2) * <span class="hljs-number">1000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;方案二： &#x27;</span>, Pi_2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Running time: %s ms&#x27;</span> % t2)<br><br><span class="hljs-comment"># 方案三：</span><br>start3 = timer()<br>temp3 = <span class="hljs-number">0</span><br>n_3 = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> n_3 &lt; <span class="hljs-number">200</span>:<br>    temp3 += <span class="hljs-number">1</span> / (<span class="hljs-number">2</span> * n_3 + <span class="hljs-number">1</span>) ** <span class="hljs-number">2</span><br>    n_3 += <span class="hljs-number">1</span><br>Pi_3 = math.sqrt(<span class="hljs-number">8</span> * temp3)<br><br>end3 = timer()<br>t3 = (end3 - start3) * <span class="hljs-number">1000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;方案三： &#x27;</span>, Pi_3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Running time: %s ms&#x27;</span> % t3)<br><br><span class="hljs-comment"># 方案四：</span><br>start4 = timer()<br>temp4 = <span class="hljs-number">0</span><br>n_4 = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">while</span> n_4 &lt; <span class="hljs-number">6</span>:<br>    temp4 += <span class="hljs-number">1</span> / n_4 ** <span class="hljs-number">4</span><br>    n_4 += <span class="hljs-number">1</span><br><br>Pi_4 = math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">90</span> * temp4, <span class="hljs-number">1</span> / <span class="hljs-number">4</span>)<br>end4 = timer()<br>t4 = (end4 - start4) * <span class="hljs-number">1000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;方案四： &#x27;</span>, Pi_4)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Running time: %s ms&#x27;</span> % t4)<br><br><span class="hljs-comment"># 方案五：</span><br>start5 = timer()<br>n_5 = <span class="hljs-number">0</span><br>temp5 = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> n_5 &lt;= <span class="hljs-number">1</span>:<br>    temp5 += (math.factorial(<span class="hljs-number">4</span> * n_5) * (<span class="hljs-number">26390</span> * n_5 + <span class="hljs-number">1103</span>)) / (<br>                math.<span class="hljs-built_in">pow</span>(math.factorial(n_5), <span class="hljs-number">4</span>) * math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">396</span>, (<span class="hljs-number">4</span> * n_5)))<br>    n_5 += <span class="hljs-number">1</span><br>Pi_5 = <span class="hljs-number">9801</span> / (temp5 * (<span class="hljs-number">2</span> * math.sqrt(<span class="hljs-number">2</span>)))<br><br>end5 = timer()<br>t5 = (end5 - start5) * <span class="hljs-number">1000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;方案五： &#x27;</span>, Pi_5)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Running time: %s ms&#x27;</span> % t5)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n各方案时间效率字典为（这里以运行时间衡量）：&quot;</span>)<br>timeEfficiency = &#123;<span class="hljs-string">&#x27;方案一&#x27;</span>: t1, <span class="hljs-string">&#x27;方案二&#x27;</span>: t2, <span class="hljs-string">&#x27;方案三&#x27;</span>: t3, <span class="hljs-string">&#x27;方案四&#x27;</span>: t4, <span class="hljs-string">&#x27;方案五&#x27;</span>: t5&#125;<br><span class="hljs-built_in">print</span>(timeEfficiency)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n使用pandas 的Series数据结构进行更清晰展示：&#x27;</span>)<br>tdata = pd.Series(timeEfficiency)<br><span class="hljs-built_in">print</span>(tdata)<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">方案一：  3.1400002979112887Running time: 0.3793000000769098 ms方案二：  3.1390625Running time: 0.1698999999462103 ms方案三：  3.140000704127709Running time: 0.1720000000204891 ms方案四：  3.140161179474259Running time: 0.14290000012806559 ms方案五：  3.141592653589794Running time: 0.11979999999311985 ms各方案时间效率字典为（这里以运行时间衡量）：&#123;&#39;方案一&#39;: 0.3793000000769098, &#39;方案二&#39;: 0.1698999999462103, &#39;方案三&#39;: 0.1720000000204891, &#39;方案四&#39;: 0.14290000012806559, &#39;方案五&#39;: 0.11979999999311985&#125;使用pandas 的Series数据结构进行更清晰展示：方案一    0.3793方案二    0.1699方案三    0.1720方案四    0.1429方案五    0.1198dtype: float64</code></pre>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文写作小记（LaTex）</title>
    <link href="/2022/02/06/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E5%B0%8F%E8%AE%B0%EF%BC%88LaTex%EF%BC%89/"/>
    <url>/2022/02/06/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E5%B0%8F%E8%AE%B0%EF%BC%88LaTex%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>因为参加数模美赛和国赛的缘故，接触了<strong>LaTex</strong>，本文介绍了一些常用用法，以及模板的使用。</p><p>美赛模板和国赛模板可以在<a href="https://www.latexstudio.net/">https://www.latexstudio.net/</a> 或者 <strong>github</strong> 上下载，一般下载最新的版本，以满足组委会对格式的要求，不过每年的要求变化都不大，注意国赛Latex源文件推荐选择<strong>Xelatex</strong>方式进行编译。</p><p><strong>原因如下：</strong></p><ul><li><p><strong>关于pdflatex</strong> 和<strong>xelatex</strong>分别是什么<br>pdflatex 和xelatex是latex编译中最常用的编译方式，而且效果一般都是比较好的。</p></li><li><p>PDFLaTeX命令：PDFTeX程序中的命令，用来编译用LaTeX格式写的tex文件。一般来说，pdflatex相对来说老一些，对于系统内的一些字体支持的不是很好，但是作为一个重要的编译方式，所支持的宏包也更多，一些很老的宏包需要pdf才能编译，这也是一个显著的优点。</p></li><li><p>XeLaTeX命令：XeTeX程序中的命令，用来编译用LaTeX格式写的tex文件。<br>这个相对来说新一些，对于中文字体支持的更好一些，一般来说当编写中文文档的时候，更适合使用xelatex进行编译。</p></li></ul><h3 id="latex-中的长度单位，尺寸"><a href="#latex-中的长度单位，尺寸" class="headerlink" title="latex 中的长度单位，尺寸:"></a>latex 中的长度单位，尺寸:</h3><p>使用latex时，经常需要调整间距，不同的长度单位容易使人迷惑混淆，我结合相关资料，整理一下，同时方便查阅。latex中的通用长度单位如下：</p><p><img src="/img/latex_long.png"></p><p><strong>对水平距离的设置常用 em ，而对垂直距离的设置，如行距，常用 ex。</strong></p><span id="more"></span><h1 id="论文写作小记（LaTex）"><a href="#论文写作小记（LaTex）" class="headerlink" title="论文写作小记（LaTex）"></a>论文写作小记（LaTex）</h1><p>下面这张图直观地描述了latex是什么(๑•̀ㅂ•́) ✧</p><p><img src="/img/latex.png"></p><h2 id="01-字体规范"><a href="#01-字体规范" class="headerlink" title="01.字体规范"></a>01.字体规范</h2><ul><li><p>加粗 \textbf{…} ：可用于表格、图片的标签；列表</p></li><li><p>意大利斜体 \textit{…} : 用于模型，方法，段落关键词的强调</p><pre><code class="hljs"> \item \textbf&#123;...&#125;</code></pre></li><li><p>小字母大写 \textsc{…} ：例如 \textsc{Task 1}</p></li><li><p>无衬线字体 \textsf{…} : 例如 4-3-3 展示 </p></li><li><p>等宽字体 \texttt{…} : 例如M2的处理</p></li><li><p>呵呵，强调 \emph{}：这个命令的意思是强调，不是变斜体。比如一段英文文字是roman体，中间使用\emph指令就会用斜体来强调，如果这段文字本来就是斜体，再强调的话应该就是roman体。对于中文来说，可能会在宋体中用楷体表示强调～</p></li></ul><h2 id="02-间距调节"><a href="#02-间距调节" class="headerlink" title="02.间距调节"></a>02.间距调节</h2><ul><li><p>强制换行：可使用\\或 \linebreak, </p><p>如果在单词中间，我们不希望换行可以使用˜连接，即不会断行的空格。</p></li><li><p>强制分页：可用 \newpage, \clearpage 或 \pagebreak</p><ul><li>推荐\clearpage，当你新加的一页内容较多时，两者基本一样，当新加的一页内容较少时，“\newpage”就无法实现你想要的效果，但“\clearpage”可以。</li></ul></li><li><p>空格：(数值与单位之间没有空格)</p><ul><li>强制空格: \␣</li><li>\quad：产生一段宽度为 1em 的水平空白</li><li>\qquad：\quad 的两倍</li><li>,：大约为 \quad 的 3/18</li></ul></li><li><p>垂直间距：\vspace{高度}：产生指定高度的垂直空白，如 \vspace{4pt}，可正可负（间距增加或者减小）。</p></li></ul><h2 id="03-列表使用"><a href="#03-列表使用" class="headerlink" title="03.列表使用"></a>03.列表使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs latex">无序列表<br>\begin&#123;itemize&#125;<br>　　\item 标签 条目内容<br>\end&#123;itemize&#125;<br>有序列表<br>\begin&#123;enumerate&#125;[可选格式]<br>　　\item 标签 条目内容<br>\end&#123;enumerate&#125;<br>eg.<br>\begin&#123;enumerate&#125;[\bfseries \textit&#123;Step&#125; 1:]<br>\item AAA<br>\item BBB<br>\item CCC<br>\end&#123;enumerate&#125;<br></code></pre></td></tr></table></figure><h2 id="04-交叉引用"><a href="#04-交叉引用" class="headerlink" title="04.交叉引用"></a>04.交叉引用</h2><ul><li><p>章节、公式、图表、定理等位置使用\label 命令之后在别处使用\ref 或\pageref 命令，生成交叉引用的编号和页码</p></li><li><p>数模论文中，一般交叉引用主要出现的有以下几种情况：</p><ul><li><p>图表的交叉引用：在图表标题命令\caption 之后紧接着使用。</p></li><li><p>章节的交叉引用：在章节标题命令\section 等之后紧接着使用。</p></li><li><p>公式的交叉引用:  </p><ol><li><p>标签\label：单行公式在公式内任意位置使用；多行公式在每一行</p><p>公式的任意位置使用。</p></li><li><p>引用\eqref：amsmath 的\eqref 命令能够为引用自动加上圆括号。</p></li></ol></li><li><p>参考文献的引用：</p><ul><li><p>在前面我们使用\bibitem 定义时，后面 {} 中的内容便自动生</p><p>成标签，供我们引用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">\bibitem&#123;1&#125; Leighton, F. Thomson. \emph&#123;Introduction to parallel algorithms and architectures: array, trees, hypercubes&#125;. 2014.<br></code></pre></td></tr></table></figure><p>在引用处，只需要使用\upcite{标签号} 即可引用。</p></li><li><p>\url：生成网址的同时在页面上输出其内容</p><p>\href：生成网址的同时在页面上输出文本的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs latex">\url&#123;网址&#125;<br>\href&#123;网址&#125;&#123;文本&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="05-公式微调"><a href="#05-公式微调" class="headerlink" title="05.公式微调"></a>05.公式微调</h2><ul><li><p>间距微调<br>  文档前添加代码：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs latex">\newenvironment&#123;shrinkeq&#125;[1]%缩短公式之间的距离<br>&#123; \bgroup<br>  \addtolength\abovedisplayshortskip&#123;#1&#125;<br>  \addtolength\abovedisplayskip&#123;#1&#125;<br>  \addtolength\belowdisplayshortskip&#123;#1&#125;<br>  \addtolength\belowdisplayskip&#123;#1&#125;&#125;<br>&#123;\egroup\ignorespacesafterend&#125;<br>————————————————<br>版权声明：本文为CSDN博主「Leafnode」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https://blog.csdn.net/rt5rte54654/article/details/37534103<br></code></pre></td></tr></table></figure><p>  然后这样编辑公式</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;shrinkeq&#125;&#123;-1.5ex&#125;<br>\begin&#123;equation&#125;<br>\varDelta t=t_j-t_i<br>\end&#123;equation&#125;<br>\end&#123;shrinkeq&#125; <br></code></pre></td></tr></table></figure></li><li><p>在行内公式中，巨算符 (∑, ∏, ∫ ) 的上下标往往会被放置到右侧，同时分数（fraction）也会变小</p><ul><li><p>利用巨算符、分数本身的缩放 (优雅)</p><ul><li>巨算符：\limits(上下方)，\nolimits(右方)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">$\sum\limits_&#123;i=1&#125;^n$<br></code></pre></td></tr></table></figure><ul><li>分数：\dfrac(正常)，\tfrac(缩小版)</li></ul></li><li><p>使用万能的\displaystyle 命令 (快捷)</p><ul><li>在行内公式出现前使用\displaystyle命令 (不带参数)，即可将行内公式完全转化为行间公式 </li></ul></li></ul></li><li><p>多行公式</p><ul><li>利用 align 环境使两个符号处对齐</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;align&#125;<br>a &amp; = b + c \\<br>  &amp; = d + e<br>\end&#123;align&#125;  <br></code></pre></td></tr></table></figure><ul><li>利用 gather 环境进行公式的居中对齐; 如果我们不需要按等号对齐，只需罗列数个公式，gather 将是一个很好用的环境：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;gather&#125;<br>a = b + c \\<br>d = e + f + g \\<br>h + i = j + k \notag \\<br>%不标号<br>l + m = n<br>\end&#123;gather&#125;<br></code></pre></td></tr></table></figure><ul><li><p>加 * 后缀，即 align* 和 gather* 环境，</p><pre><code class="hljs">    同样已经囊括数学环境，但是他不会对公式进行编号。</code></pre></li></ul></li></ul><h2 id="06-图表处理"><a href="#06-图表处理" class="headerlink" title="06.图表处理"></a>06.图表处理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;figure&#125;[htbp]<br>　　\centering<br>　　\includegraphics[选项]&#123;图形文件名 (相对位置且含后缀)&#125;<br>　　\caption&#123;图片标题&#125;<br>　　\label&#123;图片标签&#125;<br>\end&#123;figure&#125;<br><br>%eg.<br>\begin &#123; figure &#125;[ htbp ]<br>\centering<br>\includegraphics [ width =.9\ textwidth ]&#123; XXX . pdf &#125; % 图片相对位置 <br>\caption &#123; Electric Vehicles : January 2020&#125; % 图 片 标 题 5 <br>\label &#123; fig : American &#125; % 图 片 标 签 6 <br>\end &#123; figure &#125;<br><br></code></pre></td></tr></table></figure><ul><li>常用 [选项] 有:<ul><li>width, height <em>→</em> 指定图形的宽度和高度</li><li>scale <em>→</em> 缩放因子, 如 scale=0.8</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex">% eg.<br>\includegraphics[scale=0.2]&#123;tiger.png&#125;<br>\includegraphics[width=2.5cm]&#123;tiger.png&#125;<br>\includegraphics[width=0.3\textwidth]&#123;tiger.png&#125;<br></code></pre></td></tr></table></figure><ul><li><p>格式选择：</p><ul><li><p>eps：eps 是一种传统的矢量图，一般期刊在接受稿件时，要求将所</p><p>有图片都转化成 eps。eps 主要的获取途径为MATLAB直接导出。利</p><p>用 pdfLATEX 需要转化成 pdf 编译。</p></li><li><p>pdf：pdf 也是一种很好的矢量图格式，因为它的获取来源非常广。</p><p>一般软件都具备打印功能，利用虚拟打印机即可获得清晰的 pdf 文</p><p>件，但美中不足的是，打印的图片可能需要裁剪白边。</p></li></ul></li><li><p>多图模式</p><ul><li><p>子图格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin &#123; figure &#125;[ htbp ]<br>\centering<br>\subfigure [ Hot Map of one Room ]&#123; % 图 片 1([] 内 为 子 图 标 题) <br>\label &#123; fig : sub . roomhot &#125; % 子 图 1 的 标 签  <br>\includegraphics [ width =0.45\ textwidth ]&#123; XXX . jpg &#125;&#125;% 子图1位置  <br>\subfigure [ Hot Map of one Floor ]&#123; % 图 片 2  <br>\label &#123; fig : sub . floorhot &#125; % 子 图 2 的 标 签  <br>\includegraphics [ width =0.45\ textwidth ]&#123; XXX . jpg &#125;&#125;% 子 图 2 位 置 <br>\caption &#123; Hot Map of one Room and one Floor &#125; % 总 图 标 题<br>\label &#123; fig : hot &#125; % 总 图 标 签<br>\end &#123; figure &#125;<br>%一般几张图片的宽度和&lt; 1\textwidth<br></code></pre></td></tr></table></figure></li><li><p>更多多图格式：<a href="https://www.bilibili.com/video/BV1tA411t7U9?from=search&seid=16113954067034039980&spm_id_from=333.337.0.0">b站多图排版</a></p></li></ul></li><li><p>表格操作</p><ul><li><p>\hline: 与表格同宽的水平线</p></li><li><p>\cline{m-n}: 从第 <em>m</em> 列开始到第 <em>n</em> 列结束的水平线</p></li><li><p>使用 booktabs 宏包的三线表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">顶端的\toprule<br>标题行和内容间的\midrule<br>表格结束的\bottomrule<br></code></pre></td></tr></table></figure></li><li><p>在 LaTeX 中横向合并单元格较为容易，直接使用 \multicolumn{列数}{对齐方式}{内容} 即可。</p></li><li><p>而纵向合并单元格则需要用到 multirow 宏包，然后采用 \multirow{列数}{宽度}{内容}。这两个语句仅在第二个命令有所区别。在\multirow中的宽度可以填*以使用自然宽度。</p></li></ul></li><li><p>在普通表格中一般采用\cline{i-j}实现，而在三线表中则利用\cmidrule{i-j}实现</p></li><li><p>带注释的表格</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;table&#125;[htbp]<br>  \centering<br>  \caption&#123;铅钡玻璃部分风化检测点预测结果&#125;<br>\begin&#123;threeparttable&#125;<br>    \begin&#123;tabular&#125;&#123;ccccccccc&#125;<br>    \toprule[1.5pt]<br>    \rowcolor[rgb]&#123; .949,  .949,  .949&#125;\textbf&#123;采样点&#125; &amp; \multicolumn&#123;1&#125;&#123;p&#123;3.11em&#125;&#125;&#123;\textbf&#123;二氧化硅&#125;&#125; &amp; \multicolumn&#123;1&#125;&#123;p&#123;3.445em&#125;&#125;&#123;\textbf&#123;氧化钠&#125;&#125; &amp; \multicolumn&#123;1&#125;&#123;p&#123;3.61em&#125;&#125;&#123;\textbf&#123;氧化铝&#125;&#125; &amp; \multicolumn&#123;1&#125;&#123;p&#123;3.445em&#125;&#125;&#123;\textbf&#123;氧化铜&#125;&#125; &amp; \multicolumn&#123;1&#125;&#123;p&#123;3.39em&#125;&#125;&#123;\textbf&#123;氧化铅&#125;&#125; &amp; \multicolumn&#123;1&#125;&#123;p&#123;3.28em&#125;&#125;&#123;\textbf&#123;氧化钡&#125;&#125; &amp; \multicolumn&#123;1&#125;&#123;p&#123;2.945em&#125;&#125;&#123;\textbf&#123;其他&#125;&#125; &amp; \textbf&#123;总和&#125; \\<br>    \midrule[1pt]<br>    02    &amp; 64.53 &amp; 0.73  &amp; 7.55  &amp; 0.02  &amp; 23.82 &amp; 2.02  &amp; 6.33  &amp; 105.00  \\<br>    08    &amp; 49.34 &amp; 0.76  &amp; 2.44  &amp; 7.11  &amp; 12.26 &amp; 20.34 &amp; 1.49  &amp; 93.73  \\<br>    08严重  &amp; 34.58 &amp; 0.82  &amp; 2.32  &amp; 2.20  &amp; 15.97 &amp; 21.58 &amp; 7.52  &amp; 85.00  \\<br>    11    &amp; 64.34 &amp; 0.76  &amp; 4.11  &amp; 3.29  &amp; 10.05 &amp; 10.64 &amp; 6.05  &amp; 99.23  \\<br>    19    &amp; 59.93 &amp; 0.76  &amp; 5.20  &amp; 2.29  &amp; 21.75 &amp; 5.23  &amp; 6.73  &amp; 101.90  \\<br>    \bottomrule[1.5pt]<br>    \end&#123;tabular&#125;%<br>\begin&#123;tablenotes&#125;<br>\item[1] 仅展示前5条预测数据，含量较少成分归于其他，完整数据见支撑材料 附件1文件q1预测风化前.xlsx<br>\end&#123;tablenotes&#125;<br>\end&#123;threeparttable&#125;<br>  \label&#123;tab:yc&#125;%<br>\end&#123;table&#125;%<br></code></pre></td></tr></table></figure><h2 id="07-模板的修改"><a href="#07-模板的修改" class="headerlink" title="07.模板的修改"></a>07.模板的修改</h2><p>​    在XXX.cls源文件中进行模板样式的修改，一般不建议进行大的改动，遇到特殊困难可以查资料或者尝试寻找模板作者解决。</p><h2 id="08-一些分节符"><a href="#08-一些分节符" class="headerlink" title="08.一些分节符"></a>08.一些分节符</h2><p>黑色实心三角：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">\noindent$\blacktriangleright\ $\textbf&#123;\large&#123;Establishment of Musical Influence Network&#125;&#125;<br></code></pre></td></tr></table></figure><p>双色箭头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">\adfhalfrightarrowhead \textbf&#123;Genre Dimension:&#125;<br></code></pre></td></tr></table></figure><p>Step X:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">\textbf&#123;\emph&#123;Step 1&#125;: Calculating Degree Centrality&#125;<br></code></pre></td></tr></table></figure><p>半括号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">\textbf&#123;2）铅钡玻璃的亚分类&#125;<br></code></pre></td></tr></table></figure><p>圈n:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">\textbf&#123;\textcircled&#123;1&#125;&#125;<br></code></pre></td></tr></table></figure><p>大黑点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">●\textbf&#123;高钾玻璃&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>文档/论文写作</category>
      
      <category>论文写作</category>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
      <tag>论文写作</tag>
      
      <tag>数模竞赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Markdown写文档</title>
    <link href="/2021/10/03/%E4%BD%BF%E7%94%A8Markdown%E5%86%99%E6%96%87%E6%A1%A3/"/>
    <url>/2021/10/03/%E4%BD%BF%E7%94%A8Markdown%E5%86%99%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>[toc]</p><h3 id="标题：1-6级"><a href="#标题：1-6级" class="headerlink" title="标题：1-6级"></a>标题：1-6级</h3><ul><li>快捷方式：Ctrl+1-6  </li><li>转义字符：#的数量表示级数  注意#和文本有个空格</li><li>四个#号控制的标题-四级标题  #### 四级标题</li></ul><h3 id="序列："><a href="#序列：" class="headerlink" title="序列："></a>序列：</h3><ul><li><p>快捷方式</p><ol><li>有序列表 Ctrl+shift+[</li><li>无序列表 Ctrl+shift+]</li></ol></li><li><p>转义字符<br>有序列表  在空白的一行输入 1.空格 即可实现缩进排序的效果<br>无序列表  在空白的一行输入 -空格    空格可以理解为转义字符</p></li><li><p>先enter进入下一个序列；一行未输入内容前 按下tab键可以进行二级列表， 即列表的列表 （以此类推）</p></li><li><ul><li>二级列表</li></ul></li></ul><h3 id="字体格式"><a href="#字体格式" class="headerlink" title="字体格式"></a>字体格式</h3><p>Ctrl+B/I/U = 加粗/斜体/下划线  </p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><ul><li><del>删除线~~~ 双波浪可以和高亮显示的双等号一起记忆  ~~无快捷键</del></li><li>$公式$    $e^2$  <img src="https://www.zhihu.com/equation?tex=e%5E2" alt="[公式]"> </li></ul><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><ul><li><p>语法：空格-空格[ 内1空格 ]空格    </p></li><li><p><input checked="" disabled="" type="checkbox"> </p></li><li><p><input disabled="" type="checkbox"> </p></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><!--这是一段注释-->   只会在预览时显示  导出图片 /pdf等文件不会显示<h3 id="Emoji图标"><a href="#Emoji图标" class="headerlink" title="Emoji图标"></a>Emoji图标</h3><ul><li>空格:代号  :后面跟Emoji图标的代号  代号不是很严格  有联想功能  例如  :up  显示如下</li><li>是一个小手朝上的emoji</li></ul><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>— 在空白一行输入三个（或以上）-或者*即实现分割线的效果</p><hr><h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><ul><li>快捷键 Ctrl+T</li><li>转义字符特别复杂 不如用快捷键</li></ul><h3 id="特殊块"><a href="#特殊块" class="headerlink" title="特殊块"></a>特殊块</h3><ul><li><p>Ctrl+Shift+K = 代码</p></li><li><p>Ctrl+Shift+M = 公式</p></li><li><p>Ctrl+Shift+Q = 引用</p></li></ul><h3 id="代码模式"><a href="#代码模式" class="headerlink" title="代码模式"></a>代码模式</h3><ul><li>代码模式切换 Ctrl+/  </li><li>顺口溜：尖波浪双等号 </li><li>^   ^         我是^上标^  </li><li>~   ~         我是<del>下标</del></li><li>==   ==    ==高亮==</li></ul><h3 id="插图"><a href="#插图" class="headerlink" title="插图"></a>插图</h3><ul><li>快捷键 Ctrl+shift+i</li><li><img src="" alt="图的名字">   立马转化为在小括号中选取文件路径 </li></ul><p><strong>超链接</strong></p><ul><li>快捷键 Ctrl+K</li><li><a href="">链接提示语</a>  同插图理 小括号里面放入目的网址的路径</li><li><a href="https://e-alan.github.io/">我的博客主页</a></li></ul><h3 id="表格：代码模式"><a href="#表格：代码模式" class="headerlink" title="表格：代码模式"></a>表格：代码模式</h3><p>代码模式  （这个必须切换到代码模式才能看清楚到底发生了什么 第二行不可少 虽然是空的）</p><p>| 姓名 | 性别 | 生日     | </p><p>| —- | —-| ——–   |</p><p>| 张三 | 男   | 19970101 |</p><p>| 李四 | 男   | 19970601 |</p><p>效果如下表所示：</p><table><thead><tr><th>姓名</th><th>性别</th><th>生日</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>19970101</td></tr><tr><td>李四</td><td>男</td><td>19970601</td></tr></tbody></table><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><ul><li>```+代码类别</li><li>```三飘号(数字1左边的那个下符号)+代码标题+enter+enter 切换到代码模式   </li><li>第一个enter是确认标题 第二个enter是激活代码模式  第二个才是核心</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hello world !<br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>&gt;+内容  在&gt;的后面输入内容即可  但是&gt;需要在一行的最前端 </p><blockquote><p>人望山，鱼窥荷。</p></blockquote><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[^数字]     正文中进行引用的语法（内容写在前）  解释：^后面跟数字自动转换成引用格式[]   </p><p>[^数字]： 与之对应的文末文献简介的语法   解释：原有基础上加个冒号：即可  </p><h3 id="目录生成"><a href="#目录生成" class="headerlink" title="目录生成"></a>目录生成</h3><p>[toc]  后面跟回车即可变换为显示的目录样式  toc是table of contents的缩写 </p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>语法注释：```+flow 关键字来实现流程图样式的转义   还有其他关键字来显示其他形式流程图  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flow"><br></code></pre></td></tr></table></figure><h2 id="底层操作"><a href="#底层操作" class="headerlink" title="底层操作"></a>底层操作</h2><h3 id="Html-CSS"><a href="#Html-CSS" class="headerlink" title="Html+CSS"></a>Html+CSS</h3><p>从底层代码的角度修改CSS代码文件来实现高度自定义的主题样式 </p><ol><li>从官网下载目标样式的模板文件夹</li><li>把文件夹里面的CSS文件粘贴出来与文件夹并列</li><li>打开CSS文件 通过修改代码 局部微调主题样式、大小 、字体、 颜色之类</li></ol><h2 id="一些快捷键（Typora）"><a href="#一些快捷键（Typora）" class="headerlink" title="一些快捷键（Typora）"></a>一些快捷键（Typora）</h2><p>新建 CTRL + N</p><p>保存 CTRL + S</p><p>另存为 CTRL + SHIFT + S</p><p>一级标题: CTRL + 1</p><p>二级标题: CTRL + 2</p><p>三级标题: CTRL + 3</p><p>四级标题 : CTRL + 4</p><p>五级标题 : CTRL + 5</p><p>六级标题 : CTRL +6</p><p>插入表格: CTRL + T</p><p>插入引用: CTRL + SHIFT + Q</p><p>有序列表: CTRL + SHIFT + [</p><p>无序列表: CTRL + SHIFT + ]</p><p>代码块: CTRL + SHIFT + K</p><p>字体加粗: CTRL + B</p><p>超链接: CTRL + K</p><p>插入图片: CTRL + SHIFT +l</p><p>显示/隐藏侧边栏: CTRL + SHIFT + L</p><p>打开/关闭源代码模式: CTRL + /</p><p>全文查找: CTRL + F</p><p>全文替换: CTRL + H</p><p>开发者工具: SHIFT + F12</p><p>跳转到文首: CTRL + Home</p><p>跳转到文末 : CTRL + End</p><p>注：上面跳转文首、文末 HOME键 和 End键位置：（右边上下左右键的 上方有6个键，中间2个就是Home和End键）</p>]]></content>
    
    
    <categories>
      
      <category>文档/论文写作</category>
      
      <category>文档写作</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>文档写作</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>标签</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>文章分类</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
